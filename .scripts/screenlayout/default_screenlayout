#!/usr/bin/python3

## Imports
import os
import stat
from time import sleep
from itertools import permutations
from subprocess import call, check_output, Popen
## Sample command:
# xrandr --output eDP-1 --off --output HDMI-1 --off --output DP-1 --off --output HDMI-2 --off --output DP-1-1 --mode 1920x1080 --pos 0x0 --rotate normal --output DP-1-2 --off --output DP-1-3 --mode 1920x1080 --pos 1920x0 --rotate normal

## Functions
def tuple_to_res(lst):
    assert len(lst) == 2
    assert isinstance(lst, list)
    return "x".join(map(str, lst))

# check if picom is running
with open(os.devnull, "w") as file:
    picom = not call(["pidof", "picom"], stdout=file, stderr=file)

## Build subcommands

xrandr_output = check_output(["xrandr", "-q"]).decode().splitlines()

on_commands = {}
off_commands = {}
primary = True
for i, line in enumerate(xrandr_output):
    if "disconnected" in line:
        output = line.split(" ")[0]
        off_commands[output] = None
    elif "connected" in line:
        resolution = list(
            map(int, xrandr_output[i + 1].strip().split(" ")[0].strip().split("x"))
        )
        output = line.split(" ")[0]
        # command = ["--output", output, "--mode", mode, "--pos", pos, "--rotate", "normal"]
        on_commands[output] = resolution

## Remove old screen options
for option in os.listdir(os.path.expanduser("~/.scripts/screenlayout/")):
    if option.startswith("["):
        os.remove(os.path.join(os.path.expanduser("~/.scripts/screenlayout"), option))


## Build all scren layout options

# first option: same output on all screens:
command = ["xrandr"]
for output in off_commands.keys():
    command += ["--output", output, "--off"]
for output, resolution in on_commands.items():
    mode = tuple_to_res(resolution)
    command += [
        "--output",
        output,
        "--mode",
        mode,
        "--pos",
        "0x0",
        "--rotate",
        "normal",
    ]
filename = os.path.join(os.path.expanduser("~/.scripts/screenlayout/"), "same")
with open(filename, "w") as file:
    file.write("#!/usr/bin/env bash\n")
    file.write(" ".join(command))
os.chmod(filename, stat.S_IRWXU | stat.S_IRWXG)  # make executable for user and group

# build screen layouts for all screen permutations:
all_keys = set(on_commands.keys())
options = []
for i in range(1, len(all_keys) + 1):
    options += list(permutations(all_keys, i))


for option in options:
    command = ["xrandr"]
    for output in off_commands.keys():
        command += ["--output", output, "--off"]
    start_x = 0
    primary = True
    for output in option:
        resolution = on_commands[output]
        mode = tuple_to_res(resolution)
        pos = tuple_to_res([start_x, 0])
        command += [
            "--output",
            output,
            "--mode", # mode should come second option bc it is used below.
            mode,
            "--pos",
            pos,
            "--rotate",
            "normal",
        ]
        if primary:
            command += ["--primary"]
            primary = False
        start_x += resolution[0]

    for output in on_commands:
        if output not in option:
            command += ["--output", output, "--off"]

    filename = os.path.join(
        os.path.expanduser("~/.scripts/screenlayout/"),
        "-".join("[{}]".format(o) for o in option),
    )
    print(filename)
    with open(filename, "w") as file:
        file.write("#!/usr/bin/env bash\n")
        file.write(" ".join(command)+"\n")
        file.write("xset r rate 200 45\n") # reset keystroke repeat rate
        file.write(f'cat "{filename}" > {os.path.join(os.path.dirname(filename), "last")}')

    # make executable for user and group
    os.chmod(filename, stat.S_IRWXU | stat.S_IRWXG)


if __name__ == "__main__":
    filename = os.path.join(os.path.expanduser("~/.scripts/screenlayout/"), "last")
    if os.path.exists(filename):
        with open(filename, "r") as file:
            last_command = file.readlines()[1].strip().split(" ")

        # ensure all screens connected last are still connected. otherwise the default
        # layout (with enables all connected screens) is probably a better choice.
        last_connected_screens = [c for c, m in zip(last_command, last_command[1:]) if m == "--mode"]
        last_connected_screens_currently_connected = [s in on_commands for s in last_connected_screens]
        if all(last_connected_screens_currently_connected):
            command = last_command

    with open(filename, "w") as file:
        file.write("#!/usr/bin/env bash\n")
        file.write(" ".join(command))
    os.chmod(filename, stat.S_IRWXU | stat.S_IRWXG)

    call(command)

    sleep(2)

    # reset keystroke repeat rate
    Popen(["xset", "r", "rate", "200", "45"])

    # restart picom if it was running
    with open(os.devnull, "w") as file:
        if picom and call(["pidof", "picom"], stdout=file, stderr=file):
            Popen(["picom", "--experimental-backends"], stdout=file, stderr=file)

