#!/usr/bin/env python
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/
#

# git-reset or gitr: small fzf-based CLI utility for easy git-reset

import os
import sys
from subprocess import call, check_output, Popen, PIPE, CalledProcessError

def fzf(list_in, prompt):
    fzf_in = Popen(["echo", "\n".join(list_in)], stdout=PIPE).stdout
    try:
        choice = check_output(
            [
                "fzf",
                "--no-multi",
                "--layout=reverse",
                "--height=60%",
                f"--header={prompt}",
                "--bind=ctrl-l:preview-down,ctrl-h:preview-up",
                "--preview-window=right:wrap",
                '--preview=git show --color=always $(echo {} | sed "s/ .*//")',
            ],
            stdin=fzf_in,
        ).decode()[:-1]
    except CalledProcessError:
        return None
    return choice

def git_log(complete=True):
    flags = []
    if not complete:
        flags += ["--abbrev-commit", "--oneline"]
    try:
        return check_output(["git", "log"] + flags)[:-1].decode().split("\n")
    except CalledProcessError:
        return []

if __name__ == "__main__":
    short_log = git_log(complete=False)
    value = fzf(short_log, "git reset")
    if value is None:
        exit(1)
    flags = []
    if len(sys.argv) > 1 and sys.argv[1] == "--hard":
        flags += ["--hard"]
    status = call(["git", "reset", value.split(" ")[0]]+flags)
    exit(status)


