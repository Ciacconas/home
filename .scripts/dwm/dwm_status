#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# Widget selection
#--------------------------------------------------------------------------------

# The widget array determines which widgets are included in the status bar.
# Each included widget needs to be defined below by a function with the same name.

widgets=(
    services
    syncthing
    sshd
    sshtunnel
    jellyfin
    jupyterhub
    openvpn
    openconnect
    cups
    gpg
    bluetooth
    email
    pacmanstatus
    brightness
    volume
    battery
    alpha
    weather
    yearmonthdate
    clock
)

# Parse arguments
#--------------------------------------------------------------------------------

usage(){
    echo "usage: dwm_status [widget-index] [mouse-button 1|2|3|4|5]"
    exit 0
}

([ "$1" == "-h" ] || [ "$1" == "--help" ]) && usage

WIDGET="$1"
[ -n "$1" -a "$1" -ge 0 2>/dev/null ] || WIDGET=""

BUTTON="$2"

mkdir -p $HOME/.cache


# Status Command
#--------------------------------------------------------------------------------

# this is the command that pastes the widgets (defined below) together into the
# status bar of dwm (by using xsetroot). The delimiter cannot be changed for
# now, as (my fork of) dwm uses the same delimiter to figure out which widget
# was clicked.

status(){
    s=""
    delim=$(printf "\x$(printf %x 31)") # 31: invisible ascii character; 124: |
    i=0
    for func in "${widgets[@]}"
    do
        out=$($func)
        if [ ! -z "$out" ]; then
            if [[ $WIDGET == $i && $BUTTON ]]; then
                $func$BUTTON &> /dev/null || exit 1
                out=$($func)
            fi
            s=$s" "$out$delim
            i=$((i+1))
        fi
    done
    xsetroot -name "$s" &> /dev/null
    echo $s > $HOME/.cache/dwm_status 2> /dev/null
}


# Helper functions
#--------------------------------------------------------------------------------

notifyservice(){
    name=$1
    if systemctl is-active $name &> /dev/null; then
        notify-send "$name service" "\n$(systemctl status $name | grep Active | sed 's/^.*Active://g' | sed 's/\ (running)//g')\n\nmiddle click to stop\n\n[  +  + s: toggle any service ]"
    else
        notify-send "$name service" "\n$(systemctl status $name | grep Active | sed 's/^.*Active://g' | sed 's/\ (dead)//g')\n\nmiddle click to start\n\n[  +  + s: toggle any service ]"
    fi
}

toggleservice(){
    name=$1
    if systemctl is-active $name &> /dev/null; then
        sudo -A -p "[sudo] password to stop $name.service" systemctl stop $name
    else
        sudo -A -p "[sudo] password to restart $name.service" systemctl start $name
    fi
}


# Widgets
#--------------------------------------------------------------------------------

# -----------

alpha(){ # window transparency
    pidof picom > /dev/null
    if [ $? -eq 0 ]; then
        echo α $($HOME/.scripts/x/alpha get)%
    else
        echo α -
    fi
}
alpha1(){ # mouse-button 1 action for alpha widget
    notify-send "Window transparency" "\n\n + a: decrease transparency\n +  + a: increase transparency"
}

# -----------

battery(){ # battery
    battery=$(acpi -b 2> /dev/null)
    p=$(echo $battery |  sed 's/^.*, \([0-9]*\)%.*$/\1/g')
    [ -z "$p" ] && echo "" && return
    if echo $battery | grep "Discharging" &> /dev/null; then
        [ "$p" -gt 90 ] && echo "  $p%" && return
        [ "$p" -gt 60 ] && echo "  $p%" && return
        [ "$p" -gt 30 ] && echo "  $p%" && return
        [ "$p" -gt  5 ] && echo "  $p%" && return
        echo " $p\%" && return
    fi
    echo " $p%"
}
battery1(){ # mouse-button 1 action for battery widget
    notify-send "$(acpi -b)"
}

# -----------

brightness(){ # screen brightness
    dir=/sys/class/backlight/intel_backlight
    if [ ! -d $dir ]; then
        echo ""
        return
    fi
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    python -c "print(' %.0f'%(100*$brightness/$max_brightness)+'%')" # ☀️
}
brightness1(){ # mouse-button 1 action for brightness widget
    dir=/sys/class/backlight/intel_backlight
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    brightness=$(python -c "print('%.0f'%(100*$brightness/$max_brightness)+'%')")
    notify-send "Screen brightness [$brightness]" " + F11: decrease brightness\n + F12: increase brightness"
}

# -----------

bluetooth(){ # bluetooth
    [ ! -d /sys/class/bluetooth ] && echo "" && return
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]" | sed "s/.*\[\(.*\)\].*/\1/g")
    [ "$device" == "bluetooth" ] && echo  || echo 
}
bluetooth1(){ # mouse-button 1 action for bluetooth widget
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]" | sed "s/.*\[\(.*\)\].*/\1/g")
    if [[ $device == bluetooth ]]; then
        notify-send Bluetooth "\ndisconnected\n\nmiddle click /  + b to connect"
    else
        notify-send Bluetooth "\nconnected to $device\n\nmiddle click /  + b to disconnect"
    fi
}
bluetooth2(){ # mouse-button 1 action for bluetooth widget
    dmenu_bluetooth
}

# -----------

cpu(){ # cpu
    read cpu a b c previdle rest < /proc/stat
    prevtotal=$((a+b+c+previdle))
    sleep 0.5
    read cpu a b c idle rest < /proc/stat
    total=$((a+b+c+idle))
    cpu=$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))
    echo " $cpu% cpu" # 💻
}
cpu1(){ # mouse-button 1 action for cpu widget
    notify-send "cpu"
}

# -----------

cups(){ # CUPS printer status
    systemctl is-active org.cups.cupsd &> /dev/null && echo 
}
cups1(){
    notifyservice org.cups.cupsd
}
cups2(){
    toggleservice org.cups.cupsd
}

# -----------

yearmonthdate(){ # date
    date +'  %Y-%m-%d' # 📅
}
yearmonthdate1(){ # mouse-button 1 action for date widget
    notify-send "$(date +'%A, %B %d')" "\n$(cal | sed "s/\<$(date +%-d)\>//g")"
}

# -----------

gpg(){ # cached gpg keys
    gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" &> /dev/null
    [ $? -eq 0 ] && echo 
}
gpg1(){ # mouse-button 1 to display cached keys
    key=$(gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" | sed 's/.*KEYINFO\ *\([^\ !]*\).*/\1/g')
    notify-send "passwords cached for these gpg keys:" "$key\n\n[middle click to empty cache]"
}
gpg2(){ # mouse-button 2 to empty gpg password cache
    kill -SIGHUP $(pidof gpg-agent)
}


# -----------

jupyterhub(){ # jupyterhub status
    systemctl is-active jupyterhub &> /dev/null && echo   #🪐
}
jupyterhub1(){ # mouse-button 1 action for jupyterhub widget
    notifyservice jupyterhub
}
jupyterhub2(){
    toggleservice jupyterhub
}

# -----------

jellyfin(){ # jupyterhub status
    systemctl is-active jellyfin &> /dev/null && echo  # 📺
}
jellyfin1(){ # mouse-button 1 action for jupyterhub widget
    notifyservice jellyfin
}
jellyfin2(){
    toggleservice jellyfin
}

# -----------

email(){ # number of unread emails
    [ -f $HOME/.msmtprc ] || return
    gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" &> /dev/null
    if [ $? -eq 0 ]; then
        num_unread=$(find $HOME/.local/share/email/*/INBOX/new/ -type f | wc -l 2> /dev/null)
        echo " $num_unread"
    else
        echo " "
    fi
}
email1(){ # give more email info
    num_unread=$(find $HOME/.local/share/email/*/INBOX/new/ -type f | wc -l 2> /dev/null)
    gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" &> /dev/null
    if [ $? -eq 0 ]; then
        notify-send "$num_unread unread emails" "\nmiddle click to sync now."
    else
        notify-send "emails not syncing." "\nmiddle click to unlock gpg key and sync now\n\n($num_unread unread emails)"
    fi
}
email2(){ # start syncing emails
    $HOME/.scripts/email/syncmail
}

# -----------

memory(){ # memory
    used=$(free | awk '/Mem/ {print $3 }')
    total=$(free | awk '/Mem/ {print $2 }')
    percentage=$(python -c "print(f'{100*$used/$total:.0f}%')")
    echo " $percentage"
}
memory1() { # mouse-button 1 action for memory widget
    mem=`free | awk '/Mem/ {printf "%d MiB/%d MiB\n", $3 / 1024.0, $2 / 1024.0 }'`
    notify-send "free memory" mem
}

# -----------

pacmanstatus(){ # pacman
    num=$(pacman -Qu | wc -l)
    [[ $num > 0 ]] && echo  $num || echo "" # 📦
}
pacmanstatus1(){ # pacman
    num=$(pacman -Qu | wc -l)
    notify-send "Pacman ($num)" "$num packages can be updated\n\nmiddle click to update [pacman -Syu]"
}
pacmanstatus2(){ # update packages
    sudo -A -p "[sudo] password for 'pacman -Syu'" st -n float -e pacman -Syu
}

# -----------

services(){ # toggle a service
    echo 
}
services1(){
    dmenu_services
}


# -----------

sshd(){ # ssh daemon
    systemctl is-active sshd &> /dev/null && echo  # ⛓
}
sshd1(){ # mouse-button 1 action for ssh daemon widget
    notifyservice sshd
}
sshd2(){
    toggleservice sshd
}

# -----------

sshtunnel(){ # ssh tunnels
    systemctl is-active sshtunnel &> /dev/null && echo  || echo "" # ⛓
}
sshtunnel1(){ # mouse-button 1 action for ssh tunnel widget
    notifyservice sshtunnel
}
sshtunnel2(){
    toggleservice sshtunnel
}

# -----------

syncthing(){ # jupyterhub status
    systemctl is-active syncthing &> /dev/null && echo 
}
syncthing1(){ # mouse-button 1 action for jupyterhub widget
    notifyservice syncthing
}
syncthing2(){
    toggleservice syncthing
}

# -----------

clock(){ # time
    date +' %H:%M' # 🕒
}
clock1(){ # mouse-button 1 action for time widget
    notify-send "Date: $(date)"
}

# -----------

volume(){ # volume
    string=$(amixer -D pulse get Master)
    if [[ $string == *"[on]"* ]]; then
        percentage=$(echo $string | cut -d "[" -f2 | cut -d "]" -f1)
        echo "🔊 $percentage" # 🔊
    else
      echo 🔇
    fi
}
volume2(){ # mouse-button 1 action for volume widget
    string=$(amixer -D pulse get Master)
    percentage=$(echo $string | cut -d "[" -f2 | cut -d "]" -f1)
    notify-send "Volume $percentage" "\n\n + : volume up\n + : volume down\n +  + : mute"
}

# -----------

openvpn(){ # openvpn
    systemctl is-active openvpn &> /dev/null && echo   #|| echo ""
}
openvpn1(){ # mouse-button 1 action for openvpn widget
    notifyservice openvpn
}
openvpn2(){ # mouse-button 2 action for openvpn widget
    toggleservice openvpn
}

# -----------

openconnect(){ # openconnect
    pidof openconnect &> /dev/null && echo   #|| echo ""
}
openconnect1(){ # mouse-button 1 action for openconnect widget
    pidof openconnect &> /dev/null && notify-send "openconnect" "running.\n\n[middle click to stop]" || notify-send "openconnect" "stopped."
}
openconnect2(){ # mouse-button 1 action for openconnect widget
    pidof openconnect &> /dev/null && sudo -A killall openconnect
}

# -----------

weather(){ # weather
    test -f ~/.cache/weatherreportshort && cat ~/.cache/weatherreportshort || echo ""
}
weather1(){ # mouse-button 1 action for weather widget
    # cat out the weather report, show only the first 7 lines and remove all colors
    report=$(cat ~/.cache/weatherreport | head -n 7 | sed 's/\x1b\[[0-9;]*m//g' | tail -n 6 | sed 's/\\/\\\\/g' | sed 's/―/-/g')
    notify-send "Weather" "$report\n\nmiddle click for full report"
}
weather2(){
    st -n float -f mono:12 -g 130x40+1130 -e update_weather --block
}



# Status Command
#--------------------------------------------------------------------------------
status
