#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/


# Parse arguments
#--------------------------------------------------------------------------------
# the first argument to this script (if given) should equal the index of the widget
# clicked.

if [[ $1 == "-h" || $1 == "--help" ]]; then
    echo "usage: dwm_status [widget-index] [mouse-button 1|2|3|4|5]"
    exit 0
fi

WIDGET=""
if [[ $1 ]]; then
    WIDGET=$1
fi

# the second argument to this script (if given) should equal the mouse-button that was
# used to click the widget.

BUTTON=$2
[[ $BUTTON -lt 1 || $BUTTON -gt 5 ]] && BUTTON=""

# if no arguments are given then the status bar will be updated.


# Status Command
#--------------------------------------------------------------------------------

# this is the command that pastes the widgets (defined below) together into the
# status bar of dwm (by using xsetroot). The delimiter cannot be changed for
# now, as (my fork of) dwm uses the same delimiter to figure out which widget
# was clicked.

status(){
    s=""
    delim="|"
    i=0
    for func in $@
    do
        out=$($func)
        if [ "$out" ]; then
            s=$s" "$out" "$delim
            if [[ $WIDGET == $i && $BUTTON ]]; then
                $($func$BUTTON)
            fi
            i=$((i+1))
        fi
    done
    xsetroot -name "$s"
}

# define the list of active widgets here
set-status(){
    status serv bt vpn hub sync jelly ssht sshd pcmn vol brt bat wtr dte tme
}

# Helper functions
#--------------------------------------------------------------------------------

notifyservice(){
    name=$1
    if [[ $(systemctl is-active $name) == "active" ]]; then
        notify-send "$name service" "\n$(systemctl status $name | grep Active | sed 's/^.*Active://g' | sed 's/(active)//g')\n\nmiddle click to stop\n\n[ ‚óªÔ∏è + shift + s: toggle any service ]"
    else
        notify-send "$name service" "\n$(systemctl status $name | grep Active | sed 's/^.*Active://g' | sed 's/(dead)//g')\n\nmiddle click to start\n\n[ ‚óªÔ∏è + shift + s: toggle any service ]"
    fi
}

toggleservice(){ 
    name=$1
    if [[ $(systemctl is-active $name) == "active" ]]; then
        sudo -A -p "[sudo] password to stop $name.service" systemctl stop $name
    else
        sudo -A -p "[sudo] password to restart $name.service" systemctl start $name
    fi
    sleep 2 && dwm_status &
}


# Widgets
#--------------------------------------------------------------------------------

# -----------

alpha(){ # window transparency
    pidof picom > /dev/null
    if [ $? -eq 0 ]; then
        alpha=0"$(cat ~/.Xresources | grep alpha | sed s/\*alpha\:\ // | sed s/\[.\]//)"
        echo -e Œ±"$alpha"% | sed s/Œ±00/Œ±\ / | sed s/Œ±0/Œ±\ /
    else
        echo -e Œ± -
    fi
}
alpha1(){ # mouse-button 1 action for alpha widget
    notify-send "Window transparency" "‚óªÔ∏è + a: decrease alpha\n‚óªÔ∏è + shift + a: increase alpha"
}

# -----------

bat(){ # battery
    BATTERY=$(acpi -b 2> /dev/null)
    BATTERY=$(echo $BATTERY | sed "s/^.*: //" | sed "s/^Full,.*$//")
    BATTERY=$(echo $BATTERY | sed "s/^Discharging,/üîã/" | sed "s/^Charging,/üîå/" | sed "s/^\(.*%\),.*/\1/")
    echo -e $BATTERY
}
bat1(){ # mouse-button 1 action for battery widget
    notify-send "$(acpi -b)"
}

# -----------

brt(){ # screen brightness
    dir=/sys/class/backlight/intel_backlight
    if [ ! -d $dir ]; then
        echo -e ""
        return
    fi
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    python -c "print('‚òÄÔ∏è %.0f'%(100*$brightness/$max_brightness)+'%')"
}
brt1(){ # mouse-button 1 action for brightness widget
    dir=/sys/class/backlight/intel_backlight
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    brightness=$(python -c "print('%.0f'%(100*$brightness/$max_brightness)+'%')")
    notify-send "Screen brightness [$brightness]" "‚óªÔ∏è + F11: decrease brightness\n‚óªÔ∏è + F12: increase brightness"
}

# -----------

bt(){ # bluetooth
    if [ ! -d /sys/class/bluetooth ]; then
        echo -e ""
        return
    fi
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]" | sed "s/.*\[\(.*\)\].*/\1/g")
    if [[ $device == bluetooth ]]; then
        echo -e ""
    else
        echo -e Ôäì
    fi
}
bt1(){ # mouse-button 1 action for bluetooth widget
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]" | sed "s/.*\[\(.*\)\].*/\1/g")
    if [[ $device == bluetooth ]]; then
        notify-send Bluetooth disconnected.
    else
        notify-send Bluetooth "connected to $device\n‚óªÔ∏è + b to disconnect"
    fi
}

# -----------

cpu(){ # cpu
    read cpu a b c previdle rest < /proc/stat
    prevtotal=$((a+b+c+previdle))
    sleep 0.5
    read cpu a b c idle rest < /proc/stat
    total=$((a+b+c+idle))
    cpu=$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))
    echo -e "üíª $cpu% cpu"
}
cpu1(){ # mouse-button 1 action for cpu widget
    notify-send "cpu"
}

# -----------

dte(){ # date
    date +'Ôâ¥ %Y-%m-%d' # üìÖ
}
dte1(){ # mouse-button 1 action for date widget
    notify-send "Today is $(date +'%A, %B %d')" "$(asciicalendar)"
}

# -----------

hub(){ # jupyterhub status
    if [ -f /etc/systemd/system/jupyterhub.service ]; then
        if [[ $(systemctl is-active jupyterhub) == "active" ]]; then
            echo -e Óòº #ü™ê
            return;
        fi
    fi
    echo -e ""
}
hub1(){ # mouse-button 1 action for jupyterhub widget
    notifyservice jupyterhub
}
hub2(){
    toggleservice jupyterhub
}

# -----------

jelly(){ # jupyterhub status
    if [ -f /usr/lib/systemd/system/jellyfin.service ]; then
        if [[ $(systemctl is-active jellyfin) == "active" ]]; then
            echo -e "Ôé≤"
            return;
        fi
    fi
    echo -e ""
}
jelly1(){ # mouse-button 1 action for jupyterhub widget
    notifyservice jellyfin
}
jelly2(){
    toggleservice jellyfin
}

# -----------

mem(){ # memory
    mem=`free | awk '/Mem/ {printf "%d MiB/%d MiB\n", $3 / 1024.0, $2 / 1024.0 }'`
    echo -e "üíæ $mem"
}
mem1() { # mouse-button 1 action for memory widget
    mem=`free | awk '/Mem/ {printf "%d MiB/%d MiB\n", $3 / 1024.0, $2 / 1024.0 }'`
    notify-send "free memory" mem
}

# -----------

pcmn(){ # pacman
    num=$(pacman -Qu | wc -l)
    [[ $num > 0 ]] && echo -e Ôé∫ $num || echo -e ""
}
pcmn1(){ # pacman
    num=$(pacman -Qu | wc -l)
    notify-send "Pacman ($num)" "$num packages can be upgraded\n\nmiddle click to update [pacman -Syu]"
}
pcmn2(){ # update packages
    sudo -A -p "[sudo] password for 'pacman -Syu'" st -e pacman -Syu
    sleep 2 && dwm_status &
}

# -----------

serv(){ # toggle a service
    echo -e ÔÇó
}
serv1(){ # pacman
    dmenu_services
}


# -----------

sshd(){ # ssh daemon
    if [ -f /usr/lib/systemd/system/sshd.service ]; then
        if [[ $(systemctl is-active sshd) == "active" ]]; then
            echo -e ‚õì;
            return;
        fi
    fi
    echo -e ""
}
sshd1(){ # mouse-button 1 action for ssh daemon widget
    notifyservice sshd
}
sshd2(){
    toggleservice sshd
}

# -----------

ssht(){ # ssh tunnels
    if [ -f /etc/systemd/system/sshtunnel.service ]; then
        if [[ $(systemctl is-active sshtunnel) == "active" ]]; then
            echo -e ÔÉÅ;
            return;
        fi
    fi
    echo -e "ÔÑß"
}
ssht1(){ # mouse-button 1 action for ssh tunnel widget
    notifyservice sshtunnel
}
ssht2(){
    toggleservice sshtunnel
}

# -----------

sync(){ # jupyterhub status
    if [ -f /etc/systemd/system/syncthing.service ]; then
        if [[ $(systemctl is-active syncthing) == "active" ]]; then
            echo -e Ôéá
            return;
        fi
    fi
    echo -e ""
}
sync1(){ # mouse-button 1 action for jupyterhub widget
    notifyservice syncthing
}
sync2(){
    toggleservice syncthing
}

# -----------

tme(){ # time
    date +'ÔçÜ %H:%M' # üïí
}
tme1(){ # mouse-button 1 action for time widget
    notify-send "Date: $(date)"
}

# -----------

vol(){ # volume
    string=$(amixer -D pulse get Master)
    if [[ $string == *"[on]"* ]]; then
        percentage=$(echo $string | cut -d "[" -f2 | cut -d "]" -f1)
        echo -e "üîä $percentage"
    else
      echo -e üîá
    fi
}
vol1(){ # mouse-button 1 action for volume widget
    string=$(amixer -D pulse get Master)
    percentage=$(echo $string | cut -d "[" -f2 | cut -d "]" -f1)
    notify-send "Volume $percentage" "\nscroll to adjust\n\n‚óªÔ∏è + plus: increase volume\n‚óªÔ∏è + minus: decrease volume\n‚óªÔ∏è + shift + minus: mute"
}
vol4(){
    amixer -D pulse set Master 5%+ && dwm_status &
}
vol5(){
    amixer -D pulse set Master 5%- && dwm_status &
}

# -----------

vpn(){ # openvpn
    if [ -f /etc/systemd/system/openvpn.service ]; then
        if [[ $(systemctl is-active openvpn) == "active" ]]; then
            echo -e Ôç™;
            return;
        fi
    fi
    echo -e "ÔÇú"
}
vpn1(){ # mouse-button 1 action for openvpn widget
    notifyservice openvpn
}
vpn2(){ # mouse-button 2 action for openvpn widget
    toggleservice openvpn
}

# -----------

wtr(){ # weather
    s=$(cat ~/.cache/weatherreportshort)
    if [ -n "$s" ]; then
        echo -e "$s"
    else
        echo -e ""
    fi
}
wtr1(){ # mouse-button 1 action for weather widget
    # cat out the weather report, show only the first 7 lines and remove all colors
    report=$(cat ~/.cache/weatherreport | head -n 7 | sed 's/\x1b\[[0-9;]*m//g' | tail -n 6 | sed 's/\\/\\\\/g' | sed 's/‚Äï/-/g')
    notify-send "Weather" "$report"
}



# Status Command
#--------------------------------------------------------------------------------
set-status
