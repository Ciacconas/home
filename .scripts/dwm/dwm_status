#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/


# Status bar widgets
#--------------------------------------------------------------------------------

# -----------

alpha(){ # window transparency
    pidof xcompmgr > /dev/null
    if [ $? -eq 0 ]; then
        alpha=0"$(cat ~/.Xresources | grep alpha | sed s/\*alpha\:\ // | sed s/\[.\]//)"
        echo -e Œ±"$alpha"% | sed s/Œ±00/Œ±\ / | sed s/Œ±0/Œ±\ /
    else
        echo -e Œ± -
    fi
}
alpha1(){ # mouse-button 1 action for alpha widget
    notify-send "Window transparency" "‚óªÔ∏è + shift + a: increase alpha\n‚óªÔ∏è + ctrl + a: decrease alpha\n‚óªÔ∏è + a: toggle transparency on/off"
}
alpha2(){ # mouse-button 1 action for alpha widget
    notify-send "Window transparency" "‚óªÔ∏è + shift + a: increase alpha\n‚óªÔ∏è + ctrl + a: decrease alpha\n‚óªÔ∏è + a: toggle transparency on/off"
}

# -----------

bat(){ # battery
    BATTERY=$(acpi -b 2> /dev/null)
    BATTERY=$(echo $BATTERY | sed "s/^.*: //" | sed "s/^Full,.*$//")
    BATTERY=$(echo $BATTERY | sed "s/^Discharging,/üîã/" | sed "s/^Charging,/üîå/" | sed "s/^\(.*%\),.*/\1/")
    echo -e $BATTERY
}
bat1(){ # mouse-button 1 action for battery widget
    notify-send "$(acpi -b)"
}

# -----------

brt(){ # screen brightness
    dir=/sys/class/backlight/intel_backlight
    if [ ! -d $dir ]; then
        echo -e ""
        return
    fi
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    python -c "print('‚òÄÔ∏è %.0f'%(100*$brightness/$max_brightness)+'%')"
}
brt1(){ # mouse-button 1 action for brightness widget
    dir=/sys/class/backlight/intel_backlight
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    brightness=$(python -c "print('%.0f'%(100*$brightness/$max_brightness)+'%')")
    notify-send "Screen brightness [$brightness]" "‚óªÔ∏è + F11: decrease brightness\n‚óªÔ∏è + F12: increase brightness"
}

# -----------

bt(){ # bluetooth
    if [ ! -d /sys/class/bluetooth ]; then
        echo -e ""
        return
    fi
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]")
    if [ $device = "[bluetooth]" ]; then
        echo -e ""
    else
        echo -e ü¶∑
    fi
}
bt1(){ # mouse-button 1 action for bluetooth widget
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]")
    if [[ $device == "\[bluetooth\]" ]]; then
        notify-send Bluetooth disconnected.
    else
        notify-send Bluetooth "connected to $device"
    fi
}

# -----------

cpu(){ # cpu
    read cpu a b c previdle rest < /proc/stat
    prevtotal=$((a+b+c+previdle))
    sleep 0.5
    read cpu a b c idle rest < /proc/stat
    total=$((a+b+c+idle))
    cpu=$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))
    echo -e "üíª $cpu% cpu"
}
cpu1(){ # mouse-button 1 action for cpu widget
    notify-send "cpu"
}

# -----------

dte(){ # date
    date +'üìÖ %Y-%m-%d'
}
dte1(){ # mouse-button 1 action for date widget
    notify-send "Today is $(date +'%A, %B %d')" "$(asciicalendar)"
}

# -----------

hub(){ # jupyterhub status
    if [ -f /etc/systemd/system/jupyterhub.service ]; then
        if [[ $(systemctl is-active jupyterhub) == "active" ]]; then
            echo -e ü™ê
            return;
        fi
    fi
    echo -e ""
}
hub1(){ # mouse-button 1 action for jupyterhub widget
    name=jupyterhub
    notify-send "$(systemctl status $name | sed 1q)" "‚óªÔ∏è + shift + s: toggle a service on/off\n\n$(systemctl status $name | grep Active)"
}

# -----------

mem(){ # memory
    mem=`free | awk '/Mem/ {printf "%d MiB/%d MiB\n", $3 / 1024.0, $2 / 1024.0 }'`
    echo -e "üíæ $mem"
}
mem1() { # mouse-button 1 action for memory widget
    mem=`free | awk '/Mem/ {printf "%d MiB/%d MiB\n", $3 / 1024.0, $2 / 1024.0 }'`
    notify-send "free memory" mem
}

# -----------

pcmn(){ # pacman
    num=$(pacman -Qu | wc -l)
    echo -e üì¶ $num
}
pcmn1(){ # pacman
    num=$(pacman -Qu | wc -l)
    notify-send "Pacman ($num)" "$num packages can be upgraded"
}

# -----------

sshd(){ # ssh daemon
    if [ -f /usr/lib/systemd/system/sshd.service ]; then
        if [[ $(systemctl is-active sshd) == "active" ]]; then
            echo -e ‚õìÔ∏è;
            return;
        fi
    fi
    echo -e ""
}
sshd1(){ # mouse-button 1 action for ssh daemon widget
    name=sshd
    notify-send "$(systemctl status $name | sed 1q)" "‚óªÔ∏è + shift + s: toggle a service on/off\n\n$(systemctl status $name | grep Active)"
}

# -----------

ssht(){ # ssh tunnels
    if [ -f /etc/systemd/system/sshtunnel.service ]; then
        if [[ $(systemctl is-active sshtunnel) == "active" ]]; then
            echo -e üîó;
            return;
        fi
    fi
    echo -e ""
}
ssht1(){ # mouse-button 1 action for ssh tunnel widget
    name=sshtunnel
    notify-send "$(systemctl status $name | sed 1q)" "‚óªÔ∏è + shift + s: toggle a service on/off\n\n$(systemctl status $name | grep Active)"
}

# -----------

tme(){ # time
    date +'üïí %H:%M'
}
tme1(){ # mouse-button 1 action for time widget
    notify-send "Date: $(date)"
}

# -----------

vol(){ # volume
    sc=$(soundcard)
    string=$(amixer -c $sc get Master)
    if [[ $string == *"[on]"* ]]; then
        percentage=$(echo $string | cut -d "[" -f2 | cut -d "]" -f1)
        echo -e "üîä $percentage"
    else
      echo -e üîá
    fi
}
vol1(){ # mouse-button 1 action for volume widget
    sc=$(soundcard)
    string=$(amixer -c $sc get Master)
    notify-send "Volume" "‚óªÔ∏è + plus: increase volume\n‚óªÔ∏è + minus: decrease volume\n‚óªÔ∏è + shift + minus: mute\n\n$string"
}

# -----------

vpn(){ # openvpn
    if [ -f /etc/systemd/system/openvpn.service ]; then
        if [[ $(systemctl is-active openvpn) == "active" ]]; then
            echo -e üîí;
            return;
        fi
    fi
    echo -e ""
}
vpn1(){ # mouse-button 1 action for openvpn widget
    name=openvpn
    notify-send "$(systemctl status $name | sed 1q)" "$(systemctl status $name | grep Active)"
}

# -----------

wtr(){ # weather
    s=$(cat ~/.cache/weatherreportshort)
    if [ -n "$s" ]; then
        echo -e "$s"
    else
        echo -e ""
    fi
}
wtr1(){ # mouse-button 1 action for weather widget
    s=$(cat ~/.cache/weatherreport)
    # cat out the weather report, show only the first 7 lines and remove all colors
    report=$(cat ~/.cache/weatherreport | sed 7q | sed 's/\x1b\[[0-9;]*m//g')
    notify-send Weather "$report"
}


# Which widget was clicked
#--------------------------------------------------------------------------------

# the first argument to this script should equal the index of the widget
# clicked.

WIDGET=""
if [[ $1 ]]; then
    WIDGET=$1
fi


# Which button was clicked
#--------------------------------------------------------------------------------

# the second argument to this script should equal the mouse-button that was
# used to click the widget.

BUTTON=""
if [[ $2 == 1 ]]; then
    BUTTON=1
fi
if [[ $2 == 2 ]]; then
    BUTTON=2
fi
if [[ $2 == 3 ]]; then
    BUTTON=3
fi


# Status Command
#--------------------------------------------------------------------------------

# this is the command that pastes the widgets together into the status bar of
# dwm (by using xsetroot). The delimiter cannot be changed for now, as (my fork
# of) dwm uses the same delimiter to figure out which widget was clicked.

status(){
    s=""
    delim="|"
    i=0
    for func in $@
    do
        out=$($func)
        if [ "$out" ]; then
            s=$s" "$out" "$delim
            if [[ $WIDGET == $i && $BUTTON ]]; then
                $($func$BUTTON)
            fi
            i=$((i+1))
        fi
    done
    xsetroot -name "$s"
}


# Set the status bar #-------------------------------------------------------------------------------- 
status vpn hub ssht sshd pcmn vol brt bat alpha wtr dte tme

