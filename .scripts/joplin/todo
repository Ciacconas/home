#!/usr/bin/python3

import os
import sys
import sqlite3
import argparse

def eprint(*args, **kwargs):
    if not ARGS.suppress_errors:
        print(*args, file=sys.stderr, **kwargs)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("command", choices=["show", "show_legacy"], help="command")
    parser.add_argument("-t", "--notetitle", default="Todo", help="todo note title (default 'Todo')")
    parser.add_argument("-n", "--notebook", default="notes", help="notebook containing todo note (default 'notes')")
    parser.add_argument("-p", "--database-path", default="~/.config/joplin-desktop/database.sqlite", help="path of the joplin database (default '~/.config/joplin-desktop/database.sqlite3')")
    parser.add_argument("-l", "--legacy-path", default="~/Notes/todo.md", help="legacy path, fallback for when joplin database is not available.")
    parser.add_argument("-S", "--suppress-errors", action="store_true", help="suppress error messages")
    ARGS = parser.parse_args()
    return ARGS

def show():
    try:
        connection = sqlite3.connect(os.path.expanduser(ARGS.database_path))
        cursor = connection.cursor()
        cursor.execute(f"SELECT body FROM {ARGS.notebook} WHERE title = '{ARGS.notetitle}'")
        todo = "\n".join([line for line in sorted(cursor.fetchone()[0].split("\n")) if line.replace(" ","")])
        print(todo)
    except Exception as e: # Legacy option
        eprint(f"failed to open database at {ARGS.database_path}\n"
                "defaulting to legacy show")
        show_legacy()

def show_legacy():
    try:
        with open(os.path.expanduser(ARGS.legacy_path), "r") as file:
            print(file.read())
    except Exception as e:
        eprint(f"failed to open legacy todo file at {ARGS.legacy_path}\n"
                "nothing to show")

if __name__ == "__main__":
    ARGS = parse_args()
    if ARGS.command == "show":
        show()
    if ARGS.command == "show_legacy":
        show_legacy()

