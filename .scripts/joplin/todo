#!/usr/bin/python3

import os
import sys
import sqlite3
import argparse
import subprocess
from datetime import datetime, timedelta

def eprint(*args, **kwargs):
    if not ARGS.suppress_errors:
        print(*args, file=sys.stderr, **kwargs)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("command", choices=["show", "apts", "sync", "showlegacy"], help="show: show joplin todo list; apts: show calcurse appointments")
    parser.add_argument("-t", "--title", default="Todo", help="todo note title (default 'Todo')")
    parser.add_argument("-c", "--calcurse-path", default="~/.calcurse", help="path of the calcurse config folder (default '~/.calcurse')")
    parser.add_argument("-p", "--database-path", default="~/.config/joplin/database.sqlite", help="path of the joplin database (default '~/.config/joplin/database.sqlite3')")
    parser.add_argument("-l", "--line-length", default=100, type=int, help="maximum line length (characters)")
    parser.add_argument("-n", "--num-lines", default=10, type=int, help="maximum number of lines")
    parser.add_argument("-L", "--legacy-path", default="~/Notes/todo.md", help="legacy path, fallback for when joplin database is not available.")
    parser.add_argument("-S", "--suppress-errors", action="store_true", help="suppress error messages")
    ARGS = parser.parse_args()
    return ARGS

def show():
    try:
        connection = sqlite3.connect(os.path.expanduser(ARGS.database_path))
        cursor = connection.cursor()
        cursor.execute(f"SELECT body FROM notes WHERE title = '{ARGS.title}'")
        lines = [line for line in cursor.fetchone()[0].split("\n") if line.replace(" ", "")]
        lines = [line.replace(" [ ]", "") for line in lines if not "[x]" in line]
        lines = [line[:ARGS.line_length] for line in lines]
        lines = lines[:ARGS.num_lines]
        todo = "\n".join(lines)
        print(todo)
    except Exception as e: # Legacy option
        eprint(f"failed to open database at {ARGS.database_path}\n"
                "defaulting to legacy show")
        show_legacy()

def show_legacy():
    try:
        with open(os.path.expanduser(ARGS.legacy_path), "r") as file:
            lines = file.read().split("\n")
        lines = [line[:ARGS.line_length] for line in lines]
        lines = lines[:ARGS.num_lines]
        print("\n".join(lines))
    except Exception as e:
        eprint(f"failed to open legacy todo file at {ARGS.legacy_path}\n"
                "nothing to show")

def apts():
    today = datetime.today()
    apts = os.path.expanduser(os.path.join(ARGS.calcurse_path, "apts"))
    with open(apts, "r") as file:
        lines = file.read().split("\n")
    dates = [datetime.strptime(line.split(" ")[0],"%m/%d/%Y") for line in lines]
    dates, lines = zip(*sorted(zip(dates, lines)))
    lines = [line for line, date in zip(lines, dates) if date - today > timedelta(0)]
    content = "\n".join(lines[:5]).replace("|", " | ")
    print(content)

def sync():
    with open(os.devnull, "w") as file:
        subprocess.call(["joplin", "sync"], stdout=file, stderr=file)


if __name__ == "__main__":
    ARGS = parse_args()
    if ARGS.command == "apts":
        apts()
    if ARGS.command == "show":
        show()
    if ARGS.command == "showlegacy":
        show_legacy()
    if ARGS.command == "sync":
        sync()

