#!/usr/bin/python3
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/
#
"""
    Open executable; if executable is not found open it in default browser.
"""

# imports
import os
import sys
from subprocess import call, check_output, Popen, PIPE, CalledProcessError


# constants
TERMINAL = os.environ.get("TERMINAL")
BROWSER = os.environ.get("BROWSER")
OPEN_IN_TERMINAL=["vifm", "vim"]
DMENU_PATH = check_output(["dmenu_path"]).decode().splitlines()
DMENU_HISTORY_PATH = os.path.expanduser("~/.scripts/dmenu/dmenu_run.history")
DESKTOP_FILE_PATHS = [
    "~/.local/share/applications/",
    "/usr/share/applications/",
]
CURRENT_DIRECTORY=check_output(["find", ".", "-maxdepth", "2"]).decode().splitlines()

# functions
def get_selection():
    try:
        return check_output(["xclip", "-o"]).decode().replace("\n"," ")
    except CalledProcessError:
        return ""

def get_clipboard():
    try:
        return check_output(["xclip", "-selection", "clipboard", "-o"]).decode().replace("\n"," ")
    except CalledProcessError:
        return ""
def dmenu(list_in, prompt=""):
    dmenu_in = Popen(["echo", "\n".join(list_in)], stdout=PIPE).stdout
    prompt = [] if not prompt else ["-p", prompt.replace(" ", "-")]
    try:
        choice = check_output(
            ["dmenu"] + prompt + sys.argv[2:], stdin=dmenu_in
        ).decode().replace("\n", " ")
    except CalledProcessError:
        choice = ""
    if "*" in choice:
        choice = choice.replace(" * ", f" {get_selection()} ")
    if "+" in choice:
        choice = choice.replace(" + ", f" {get_clipboard()} ")
    choice = choice.replace("\n", "").replace("\t", "")
    while "  " in choice:
        choice = choice.replace("  "," ")
    while choice.endswith(" "):
        choice = choice[:-1]
    return choice

def open_desktop_file(args):
    desktop_filename = args[0][:-1]
    for path in DESKTOP_FILE_PATHS:
        path = os.path.abspath(os.path.expanduser(path))
        if desktop_filename+".desktop" in os.listdir(path):
            with open(os.path.join(path,desktop_filename+".desktop"), "r") as file:
                for line in file.readlines():
                    if line.startswith("Exec"):
                        exec_line = line
                        exec_cmd = [c for c in exec_line[5:].split(" ") if not c.startswith("%")]
                        break
            if exec_line:
                break
    Popen(exec_cmd + args[1:])

def list_desktop_files():
    applications = []
    for path in DESKTOP_FILE_PATHS:
        path = os.path.abspath(os.path.expanduser(path))
        applications += [f"{app[:-8]}*" for app in os.listdir(path) if app.endswith(".desktop")]
    return applications

# main script
if __name__ == "__main__":
    with open(DMENU_HISTORY_PATH, "a") as file:
        pass # create file if it does not exist
    with open(DMENU_HISTORY_PATH, "r") as file:
        dmenu_history = file.read().splitlines()

    DESKTOP_FILES = list_desktop_files()

    dmenu_commands = list({k: None for k in (
            list({k: None for k in dmenu_history[::-1]}) # history
            + OPEN_IN_TERMINAL
            + [BROWSER]
            + DMENU_PATH
            + DESKTOP_FILES
            + CURRENT_DIRECTORY
            + ["[clear history]"]
    )})

    choice = dmenu(dmenu_commands)

    if not choice:
        exit(0)

    choice = choice.split(" ")
    if " ".join(choice) == "[clear history]":
        os.remove(DMENU_HISTORY_PATH)
    elif choice[0] in OPEN_IN_TERMINAL:
        Popen([TERMINAL, "-e"] + choice)
    elif choice[0] in DESKTOP_FILES:
        open_desktop_file(choice)
    else:
        try:
            Popen(choice)
        except (FileNotFoundError, PermissionError):
            if any(choice[0].startswith(prefix) for prefix in ("http://", "https://", "file:///")):
                Popen([BROWSER, "%20".join(choice)])
            elif os.path.isdir(" ".join(choice)):
                directory = " ".join(choice)
                os.chdir(directory)
                Popen([TERMINAL])
            elif os.path.exists(" ".join(choice)):
                Popen(["xdg-open", f"{' '.join(choice)}"])
            else:
                duckduckgo_query = f"https://duckduckgo.com/?q={'+'.join(choice)}"
                Popen([BROWSER, duckduckgo_query])
                exit(1) # command given does not exist, it's also not a valid url

    with open(DMENU_HISTORY_PATH, "a") as file:
        if choice != "[clear history]":
            file.write(f"{' '.join(choice)}\n")

