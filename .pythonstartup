import os
import sys
import shutil
import warnings
import importlib
import contextlib
from shutil import move, move as mv, copy, copy as cp

@contextlib.contextmanager
def nostdout():
    oldstdout, oldstderr = sys.stdout, sys.stderr
    file = open(os.devnull, "w")
    try:
        sys.stdout, sys.stderr = file, file
        yield
    finally:
        sys.stdout, sys.stderr = oldstdout, oldstderr
        file.close()

class LazyModule:
    """ Import module on first attribute access

        - for faster REPL loadtimes
        - to prevent ImportErrors
    """
    def __init__(self, name="", fullname=""):
        self.name = name
        self.fullname = fullname
    def _import(self):
        module = importlib.import_module(self.fullname)
        globals()[self.name] = module
        return module
    def __getattr__(self, attr):
        module = self._import()
        attr = getattr(module, attr)
        return attr
    def __repr__(self):
        module = self._import()
        return repr(module)
    def __str__(self):
        module = self._import()
        return str(module)

np = LazyModule(name="np", fullname="numpy")
sp = LazyModule(name="sp", fullname="scipy")
nn = LazyModule(name="nn", fullname="torch.nn")
torch = LazyModule(name="torch", fullname="torch")
F = LazyModule(name="F", fullname="torch.nn.functional")
plt = LazyModule(name="plt", fullname="matplotlib.pyplot")


def unrecursive(start=0, stacksize=3, printsrc=True):
    import os, re, inspect, functools, tempfile, secrets
    def _unrecursive(func):
        n = inspect.getfullargspec(func).args[0]
        stack = [func(i) for i in range(start, start+stacksize)]
        s = re.sub("^@.*", "", inspect.getsource(func))
        if func.__doc__:
            s = s.replace(func.__doc__, "").replace("''''''", "").replace('""""""', "")
        s = "\n".join(stripright(line) for line in s.split("\n") if line.strip())
        funcname = func.__name__
        funcdef, *funcbody = s.split(":\n")
        funcdef = funcdef + ':\n'
        if func.__doc__:
            funcdef = funcdef + '  """' + func.__doc__.replace("    ", "  ") + '"""\n'
        funcbody = ":\n".join(funcbody)
        funcbody = re.sub(f"([^_a-zA-Z]){n}$", f"\\1_{n}", funcbody)
        funcbody = re.sub(f"([^_a-zA-Z]){n}([^_a-zA-Z])", f"\\1_{n}\\2", funcbody)
        funcbody = f"  for _{n} in range({start+stacksize}, {n}+1):\n" + funcbody
        for i in range(start+stacksize-1, start, -1):
            funcbody = f"  if {n} == {i}: return {repr(stack[start+i])}\n" + funcbody
        funcbody = f"  if {n} <= {start}: return {repr(stack[start])}\n" + funcbody
        funcbody = "  _stack = " + "(" + ", ".join(repr(v) for v in stack) + ",)" + "\n" + funcbody
        funcbody = re.sub(f"{funcname}\([ ]*_[a-zA-Z]+([^)]*)\)", r"_stack[\1]", funcbody)
        funcbody = re.sub(f"return[ ]*_stack", "_result = _stack", funcbody)
        funcbody = funcbody + "\n    " + "_stack = " + "(" + ", ".join(f"_stack[{-stacksize+i+1}]" for i in range(stacksize-1)) + f"{', ' if stacksize > 1 else ''}_result,)"+"\n"
        s = funcdef + funcbody + "  return _result"
        module = f"{inspect.getsource(unrecursive)}\n{s}"
        if printsrc:
            print(s)
        fn = f"./__pycache__/unrecursive_{funcname}_{secrets.token_hex(nbytes=5)}.py"
        os.makedirs(os.path.dirname(fn), exist_ok=True)
        open(fn, "w").write(module)
        code = compile(module, fn, "exec")
        _globals = {k: v for k, v in globals().items()}
        exec(code, _globals)
        newfunc = _globals[funcname]
        return newfunc
    return _unrecursive
