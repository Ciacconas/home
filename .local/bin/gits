#!/usr/bin/python3
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/
#

import os
import sys
from subprocess import call, check_output, Popen, PIPE, CalledProcessError


def fzf(list_in, prompt):
    fzf_in = Popen(["echo", "\n".join(list_in)], stdout=PIPE).stdout
    try:
        choice = check_output(
            [
                "fzf",
                "--multi",
                "--layout=reverse",
                "--height=60%",
                f"--header={prompt}",
                "--bind=j:down,k:up,l:toggle,h:toggle,space:toggle,ctrl-j:preview-down,ctrl-k:preview-up",
                "--preview-window=right:wrap",
                '--preview=git-status preview "{}"',
            ],
            stdin=fzf_in,
        ).decode()[:-1]
    except CalledProcessError:
        return []
    return choice.split("\n")


def git_status():
    raw_status = check_output(["git", "status", "--short"]).decode().splitlines()
    if not raw_status:
        status = check_output(["git", "status"]).decode()[:-1]
        print(status)
        exit(0)
    status = []
    L = 0
    for s in raw_status:
        if s[1] != " ":
            status.append(s[:3] + " [add]     " + s[3:])
            if len(status[-1]) > L:
                L = len(status[-1])
    for s in raw_status:
        if s[0] != " " and s[0] != "?":
            status.append(s[:3] + " [unstage] " + s[3:])
            if len(status[-1]) > L:
                L = len(status[-1])
    for s in raw_status:
        if s[1] != "?" and s[0] != "A":
            status.append(s[:3] + " [restore] " + s[3:])
            if len(status[-1]) > L:
                L = len(status[-1])
    for s in raw_status:
        if s[:2] == "??" or s[:2] == "A ":
            status.append(s[:3] + " [delete]  " + s[3:])
            if len(status[-1]) > L:
                L = len(status[-1])

    _status = ["-" * L]
    __status = [x for x in status if x[0] not in (" ", "?") and "[add]" not in x]
    if __status:
        _status += __status
        _status += ["-" * L]
    _status += [x for x in status if x[0] in (" ", "?") or "[add]" in x]

    status = ["    [add -A]"] + ["    [commit]"] + ["    [reset]"] + _status
    return status


if __name__ == "__main__":
    if len(sys.argv) == 1:
        old_status = (
            "old status:\n" + check_output(["git", "status", "--short"]).decode()
        )
        actions = fzf(git_status(), "git status")
        try:
            idx = actions.index("    [commit]")
            del actions[idx]
            actions.append("    [commit]")
        except ValueError:
            pass
        for action in actions:
            if action == "    [add -A]":
                print("git add -A")
                call(["git", "add", "-A"])
            elif action == "    [reset]":
                print("git reset")
                call(["git", "reset", "--quiet"])
            elif action == "    [commit]":
                print("git commit")
                call(["git", "commit"])
            elif "[add]" in action:
                filename = action[3:].replace("[add]", "").strip()
                print(f"git add -- {filename}")
                call(f"git add -- {filename}", shell=True)
            elif "[unstage]" in action:
                filename = action[3:].replace("[unstage]", "").strip()
                print(f"git reset -- {filename}")
                call(f"git reset -- {filename}", shell=True)
            elif "[restore]" in action:
                filename = action[3:].replace("[restore]", "").strip()
                print(f"git reset -- {filename}")
                print(f"git checkout -- {filename}")
                call(f"git reset -- {filename}", shell=True)
                call(f"git checkout -- {filename}", shell=True)
            elif "[delete]" in action:
                filename = action[3:].replace("[delete]", "").strip()
                print(f"git reset -- {filename}")
                print(f"rm -- {filename}")
                call(f"git reset -- {filename}", shell=True)
                call(f"rm -- {filename}", shell=True)
            else:
                continue
        new_status = (
            "new status:\n" + check_output(["git", "status", "--short"]).decode()
        )
        exit(0)
    elif len(sys.argv) == 3 and sys.argv[1] == "preview":
        filename = (
            sys.argv[2][3:]
            .replace("[add]", "")
            .replace("[unstage]", "")
            .replace("[restore]", "")
            .replace("[delete]", "")
            .replace('"', "")
            .replace("'", "")
            .strip()
        )
        try:
            with open(filename, "r") as file:
                content = file.read()
            diff = call(["git", "diff", "--color=always", filename])
        except:
            if filename == "[add -A]" or filename == "[commit]":
                call(["git", "-c", "color.status=always", "status"])
            elif filename == "[reset]":
                call(["git","diff", "--color=always"])
        exit(0)
    else:
        exit(1)
