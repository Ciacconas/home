#!/usr/bin/python3

import os
import sys
from subprocess import call, Popen, PIPE, check_output

lsblk_out = check_output(["lsblk"]).decode().splitlines()
lsblk_out = lsblk_out[1:]

lsblkf_out = check_output(["lsblk", "-f"]).decode().splitlines()
header = lsblkf_out[0]
lsblkf_out = lsblkf_out[1:]

i_name = header.index("NAME")
i_fstype = header.index("FSTYPE")
i_label = header.index("LABEL")
i_uuid = header.index("UUID")
i_fsavail = header.index("FSAVAIL")
i_fsuse = header.index("FSUSE")
i_mp = header.index("MOUNTPOINT")

mountpoints = {}
for i, (lsblk_line, lsblkf_line) in enumerate(zip(lsblk_out, lsblkf_out)):
    if lsblkf_line[0] not in ("├", "└"):
        mountpoints[lsblk_line] = None
        continue
    dic = {}
    dic["name"] = lsblkf_line[2:i_fstype].strip()
    dic["fstype"] = lsblkf_line[i_fstype:i_label].strip()
    dic["label"] = lsblkf_line[i_label:i_uuid].strip()
    dic["uuid"] = lsblkf_line[i_uuid:i_fsavail].strip()
    dic["fsavail"] = lsblkf_line[i_fsavail:i_fsuse].strip()
    dic["fsuse"] = lsblkf_line[i_fsuse:i_mp].strip()
    dic["mp"] = lsblkf_line[i_mp:].strip()

    lsblk_out[i] = lsblk_line = lsblk_line + " (" + dic["uuid"] + ")"

    mountpoints[lsblk_line] = dic

lsblkf_out = Popen(["echo", "\n".join(lsblk_out)], stdout=PIPE).stdout
lsblk_choice = check_output(["dmenu", "-l", "100", "-p", "mount drive"] + sys.argv[1:], stdin=lsblkf_out).decode()[:-1]

lsblk_choice = mountpoints[lsblk_choice]

if not lsblk_choice:
    exit()

mount_name_options = []
if lsblk_choice["label"]:
    mount_name_options.append(f"/mnt/{lsblk_choice['label']}")
mount_name_options.append(f"/mnt/{lsblk_choice['name']}")
mount_name_options.append(f"/mnt/{lsblk_choice['uuid'].split('-')[0]}")
mount_name_options = Popen(["echo", "\n".join(mount_name_options)], stdout=PIPE).stdout
mount_name_choice = check_output(["dmenu", "-l", "100", "-p", f"mount /dev/{lsblk_choice['name']} in"] + sys.argv[1:], stdin=mount_name_options).decode().strip()
mount_name_choice = os.path.abspath(os.path.expanduser(mount_name_choice))

try:
    os.makedirs(mount_name_choice)
except FileExistsError:
    if os.listdir(mount_name_choice):
        call(["notify-send", "mount error", "mount folder not empty"])
        exit()

status = call(["st", "-n", "dmenu_mount", "-e", "sudo", "mount", f"/dev/{lsblk_choice['name']}", mount_name_choice])

if status == 0:
    call(["notify-send", "drive mounted: ", f"/dev/{lsblk_choice['name']} --> {mount_name_choice}"])
else:
    call(["notify-send", "drive failed to mount.", f"exit status {status}"])
