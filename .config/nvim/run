#!/usr/bin/python3
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/
#

""" Run/compile/build af file/project

This script is linked to <F5> in vim.

"""


# Imports

import os
import sys
from time import sleep
from subprocess import Popen, check_output, CalledProcessError


# Environment variables

TERMINAL = os.environ.get("TERMINAL")


# Functions

def xdotool_search(process_name):
    """ search for a terminal [window] id given the classname of the terminal [window]

    Args:
        process_name: the name of the process (classname) to search for

    """
    try:
        out = check_output(["xdotool", "search", "--classname", process_name])
        return out[:-1].decode()
    except CalledProcessError:
        return None

def xdotool_send(terminal, command):
    """ send a command (key per key) to a window (terminal)

    Args:
        terminal: the terminal [window] id
        command: the command to execute (the keys to send)
    """
    special_characters = {
        " ": "space",
        ".": "period",
        "%": "percent",
        "=": "equal",
        "-": "minus",
        "|": "bar",
        "/": "slash",
        "\\": "backslash",
        "\n": "Return",
        # some special characters signifying control operations
        "ðŸ›‘": "control+c", # stop sign emoji
        "ðŸ“‹": "alt+v", # clipboard emoji
    }
    characters = [special_characters.get(c, c) for c in command]
    return check_output(["xdotool", "key", "--window", terminal] + characters)

def new_terminal(name=None, execute=None):
    """ spawn a new terminal

    Args:
        name: the classname of the new terminal
        execute: the (single word) command to execute inside the terminal
    """
    name_list = ["-n", name] if name else []
    execute_list = ["-e", execute] if execute else []
    Popen([TERMINAL] + name_list + execute_list)
    for i in range(5):  # five tries to find the newly spawned terminal.
        sleep(0.1)
        terminal = xdotool_search(name)
        if terminal is not None:
            return terminal
    # if no terminal is found, raise an error:
    raise CalledProcessError(
        f"cannot find terminal with process name {process_name}"
    )

def run_python(filename):
    """ run a python file

    Args:
        filename: the filename of the file to run
    """
    escaped_filename = filename.replace(" ", "\\ ")
    process_name = f"ipython_{filename}".replace("/", "_").replace(" ", "_")
    terminal = xdotool_search(process_name)
    if terminal is None:
        terminal = new_terminal(name=process_name, execute="ipython --matplotlib")
    xdotool_send(terminal, f"%run {escaped_filename}\n")

def run_python_selection(filename):
    """ run a selection

    Args:
        filename: the filename of the file of which a selection is run.

    Notes:
        - assumes the selection has been copied into the normal
            clipboard buffer [ + buffer ] by nvim
        - assumes the hotkey to paste in the terminal is alt+v
    """
    escaped_filename = filename.replace(" ", "\\ ")
    process_name = f"ipython_{filename}".replace("/", "_").replace(" ", "_")
    terminal = xdotool_search(process_name)
    if terminal is None:
        terminal = new_terminal(name=process_name, execute="ipython --matplotlib")
        sleep(2) # give time for the terminal to spawn
    xdotool_send(terminal, f"ðŸ“‹\n")


def run_latex(filename):
    escaped_filename = filename.replace(" ", "\\ ")
    process_name = f"latex_{filename}".replace("/", "_").replace(" ", "_")
    terminal = xdotool_search(process_name)
    if terminal is None:
        terminal = new_terminal(name=process_name)
    xdotool_send(terminal, f"ðŸ›‘latexmk -xelatex -synctex=1 -interaction=nonstopmode {filename} | less -FKX\n")


# Main script

if __name__ == "__main__":
    # checks
    run_selection = False
    if len(sys.argv) > 2:
        run_selection = (sys.argv[2] == "SELECTION")
        if not run_selection:
            print("Too many arguments.")

    # important variables
    filename = sys.argv[1]

    with open(filename, "r") as file:
        shebang = file.readline()

    # different cases:
    if filename.endswith(".py") or "python" in shebang:
        if not run_selection:
            run_python(filename)
        else:
            run_python_selection(filename) # assumes the selection has been copied by nvim!
    elif filename.endswith(".tex"):
        run_latex(filename)
    else:
        exit(1)
