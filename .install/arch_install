#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# ---------------------------------------------------- #
# !!! NOTE THAT THIS SCRIPT SHOULD NOT BE SOURCED. !!! #
# ---------------------------------------------------- #

# last run: 2020.04.12

# Note: this script can be run as often as you like. It will not attempt to re-install
#       any already installed program, making it a very fast way update some preferences
#       or install additional packages by adding them to the list below.

## Checks
#-------------------------------------------------------------------------------

## pre-installation checks
if [ "$USER" == root ]; then
    echo
    echo "first_install.sh should not be run as root / with sudo."
    echo "this script should be run normally by a user [with sudo privileges]."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "first_install.sh should NOT be sourced."
    exit 1
fi


## Logging
#-------------------------------------------------------------------------------

mkdir -p $HOME/.local/share
LOG="$HOME/.local/share/arch_install.log"
ERR="$HOME/.local/share/arch_install_errors.log"
printf "ARCH PACKAGE INSTALL\n\n\n" >> $LOG
printf "ARCH PACKAGE INSTALL\n\n\n" >> $ERR


## User input
#-------------------------------------------------------------------------------

# Ask for password, this will be used for all the sudo calls.:
# and to change the shell later on.
read -s -p "[sudo] password for $USER: " password
echo $password | sudo -S echo '' 2>/dev/null
if [ $? -ne 0 ]; then
    printf "\nIncorrect sudo password. Script ended prematurely.\n\nPlease start over.\n"
    exit 1
fi


## Update
#-------------------------------------------------------------------------------

## Update arch
printf "\n\nUpdating Arch Linux...\n\n"
printf "\n\nUpdating Arch Linux...\n\n" >> $LOG
printf "\n\nUpdating Arch Linux...\n\n" >> $ERR
echo $password | sudo -S pacman -Syu --noconfirm >> $LOG 2>> $ERR


## Custom installation functions
#-------------------------------------------------------------------------------

echo_success(){
    if [ $1 -ne 0 ]; then
        printf "failed!\n"
        printf "\nfailed!\n" >> $LOG
        printf "\nfailed!\n" >> $ERR
        return 1
    fi

    printf "success!\n"
    printf "\nsuccess!\n" >> $LOG
    printf "\nsuccess!\n" >> $ERR
    return 0
}

pacman_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $1 >> $LOG 2>> $ERR;
    if [ $? = 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 0
    fi

    printf "sudo pacman -S --noconfirm --noprogress $1\n" >> $LOG
    printf "sudo pacman -S --noconfirm --noprogress $1\n" >> $ERR
    echo $password | sudo -S pacman -S --noconfirm --noprogress $1 >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    return $success
}

yay_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $1 >> $LOG 2>> $ERR;
    if [ $? = 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 0
    fi

    printf "yay -S -q --noconfirm $1\n" >> $LOG
    printf "yay -S -q --noconfirm $1\n" >> $ERR
    yay -S -q --noconfirm $1 >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    return $success
}

git_install(){ # will only install the first argument!
    name=$(basename $1)
    name=${name%.*}

    printf "installing $name... "
    printf "\n\n\ninstalling $name...\n" >> $LOG
    printf "\n\n\ninstalling $name...\n" >> $ERR

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $name >> $LOG 2>> $ERR;
    if [ $? = 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 0
    fi

    printf "git clone $1 /tmp/gitpkg\n" >> $LOG
    printf "git clone $1 /tmp/gitpkg\n" >> $ERR
    git clone $1 /tmp/gitpkg >> $LOG 2>> $ERR

    printf "cd /tmp/gitpkg\n" >> $LOG
    printf "cd /tmp/gitpkg\n" >> $ERR
    cd /tmp/gitpkg >> $LOG 2>> $ERR

    printf "makepkg -si --noconfirm --noprogress\n" >> $LOG
    printf "makepkg -si --noconfirm --noprogress\n" >> $ERR
    makepkg -si --noconfirm --noprogress >> $LOG 2>> $ERR
    success=$?
    echo_success $success

    printf "cd ~\n" >> $LOG
    printf "cd ~\n" >> $ERR
    cd $HOME >> $LOG 2>> $ERR

    printf "rm -rf /tmp/gitpkg\n" >> $LOG
    printf "rm -rf /tmp/gitpkg\n" >> $ERR
    rm -rf /tmp/gitpkg >> $LOG 2>> $ERR

    return $success
}

submodule_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    printf "cd $HOME/.build/$1\n" >> $LOG
    printf "cd $HOME/.build/$1\n" >> $ERR
    cd "$HOME/.build/$1" >> $LOG 2>> $ERR

    printf "git pull\n" >> $LOG
    printf "git pull\n" >> $ERR
    git checkout master >> $LOG 2>> $ERR
    git pull origin master >> $LOG 2>> $ERR

    printf "sudo make clean install\n" >> $LOG
    printf "sudo make clean install\n" >> $ERR
    echo $password | sudo -S rm config.h >> $LOG 2>> $ERR
    echo $password | sudo -S make clean >> $LOG 2>> $ERR
    echo $password | sudo -S make all >> $LOG 2>> $ERR
    echo $password | sudo -S make install >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    echo $password | sudo -S make clean >> $LOG 2>> $ERR
    echo $password | rm -f config.h >> $LOG 2>> $ERR

    printf "cd $HOME\n" >> $LOG
    printf "cd $HOME\n" >> $ERR
    cd $HOME >> $LOG 2>> $ERR

    return $success
}

pip3_install() {
    printf "pip3 install $1... "
    printf "\n\n\npip3 install $1\n" >> $LOG
    printf "\n\n\npip3 install $1\n" >> $ERR
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> $LOG
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> $ERR
    echo $password | sudo -S /usr/bin/python3 -m pip install $1 >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    return $success
}

pip2_install() {
    printf "pip2 install $1... "
    printf "\n\n\npip2 install $1\n" >> $LOG
    printf "\n\n\npip2 install $1\n" >> $ERR
    printf "sudo /usr/bin/python2 -m pip install $1\n" >> $LOG
    printf "sudo /usr/bin/python2 -m pip install $1\n" >> $ERR
    echo $password | sudo -S /usr/bin/python2 -m pip install $1 >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    return $success
}

systemctl_create() {
    source=$HOME/.install/services/$1.service
    target=$(head -6 $source | tail -1 | sed 's/#\ *TARGET:\ *//g')

    echo $password | sudo -S systemctl daemon-reload
    echo "# NOTE: THIS FILE WAS AUTO-GENERATED BY $HOME/.install/arch_install" | sudo tee $target > /dev/null 2>> $ERR
    echo "# AND WILL PROBABLY BE OVERWRITTEN IN THE FUTURE." | sudo tee -a $target > /dev/null 2>> $ERR
    echo "# EDIT THE SOURCE FILE AT $source" | sudo tee -a $target > /dev/null 2>> $ERR
    echo "# and run $HOME/.install/arch_install again to install it here." | sudo tee -a $target > /dev/null 2>> $ERR
    echo "" | sudo tee -a $target > /dev/null 2>> $ERR
    tail --lines=+7 $source | sed 's|{USER}|'$USER'|g' | sed 's|{HOME}|'$HOME'|g' | sudo tee -a $target > /dev/null 2>> $ERR
    echo $password | sudo -S systemctl daemon-reload

    echo "$source created." >> $LOG 2>> $ERR
    echo "$source created." 2>> $ERR
}

systemctl_enable() {
    printf "enabling $1 service... "
    printf "\n\n\nenabling $1 service...\n" >> $LOG
    printf "\n\n\nenabling $1 service...\n" >> $ERR
    printf "sudo systemctl enable $1\n" >> $LOG
    printf "sudo systemctl enable $1\n" >> $ERR
    echo $password | sudo -S systemctl enable $1 >> $LOG 2>> $ERR
    [[ $1 != "lightdm" && $1 != "NetworkManager" ]] && echo $password | sudo -S systemctl restart $1 >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    return $success
}

link() {
    printf "link $1 to $2... "
    printf "\n\n\nlink $1 to $2\n" >> $LOG
    printf "\n\n\nlink $1 to $2\n" >> $ERR
    printf "sudo ln -sf $1 $2\n" >> $LOG
    printf "sudo ln -sf $1 $2\n" >> $ERR
    if [ -f "$2" ]; then
        echo $password | sudo -S mv $2 $2.bak  >> $LOG 2>> $ERR
    fi
    echo $password | sudo -S ln -sf $1 $2  >> $LOG 2>> $ERR
    success=$?
    echo_success $success
    return $success
}


## Install and configure packages
#-------------------------------------------------------------------------------

## build tools
pacman_install git
pacman_install make
pacman_install cmake

## AUR package manager
git_install https://aur.archlinux.org/yay.git

## Terminal
# eyecandy: patch pacman config to enable Color and ILoveCandy
echo $password | sudo -S sed -i 's|^#Color|Color\nILoveCandy|g' /etc/pacman.conf >> $LOG 2>> $ERR
# install scripts for bootstrapping new arch installations
pacman_install arch-install-scripts
# calcurse: a terminal calendar client
pacman_install calcurse
# search tool
pacman_install grep
# alternative search tool
pacman_install ripgrep
# alternative search tool
# pacman_install ack
# fuzzy finder tool
pacman_install fzf
# rsync: safe and secure copy & backup
pacman_install rsync
# atool gives information about archives
# pacman_install atool
# zip
pacman_install zip
# unzip
pacman_install unzip
# unrar
pacman_install unrar
# universal unarchiver (executable: unar)
pacman_install unarchiver
# rpm extraction shell script
yay_install rpmextract
# pv: progress bars on stdout
pacman_install pv
# battery information
pacman_install acpi
# battery daemon (sleep on low power):
# pacman_install acpid
# systemctl_enable acpid
# vifm: terminal file browser
pacman_install vifm
# dos2unix: tool to change carriage return (^M | \r) into nomal return (\n)
# pacman_install dos2unix
# terminal multiplexer:
pacman_install tmux
# program manuals
pacman_install man
pacman_install man-db
pacman_install man-pages
pacman_install texinfo
# very useful alternative to man: show most common commands for executable
pacman_install tldr
# terminal music player: mplayer
pacman_install mplayer
# copying and pasting from the terminal
pacman_install xclip
# pdf conversion
pacman_install poppler
# check if bash script is posix complient (needs haskell -> 250mb -> disables by default)
# pacman_install shellcheck
# highlight: to highlight code in the terminal (nice `cat` alternative, used in my custom scripts)
pacman_install highlight
# mediainfo: show audio and video information in terminal
pacman_install mediainfo
# process information
pacman_install htop
# termdown: terminal timer/stopwatch
pacman_install termdown
# espeak: text to speach engine (used in my custom termdown script)
pacman_install espeak
# aplay: simple sound player based on alsa
# yay_install alsaplayer-git
# system information
pacman_install neofetch
# lightweight system information
yay_install pfetch
# some more eye-candy (useless music visualizer):
yay_install cli-visualizer
# large ascii letters
pacman_install figlet
# task spooler: queue tasks
# pacman_install task-spooler
# netcat: for socket communication
# pacman_install gnu-netcat
# sockets (needed for custom mpvcontrol script)
pacman_install socat
# torrents: transmission
pacman_install transmission-cli
yay_install transmission-remote-cli-git
# a more beautiful ls command (I have ls remapped to lsd when no arguments given)
pacman_install lsd
# vim / neovim: terminal text editor
pacman_install neovim
# ctags: recommended vim dependency for jump-to-tag functionality
pacman_install ctags
# instant-markdown-d (installed with npm) is a nice tool to live visualize markdown from within neovim.
pacman_install npm
echo $password | sudo -S npm -g install instant-markdown-d >> $LOG 2>> $ERR
# link neovim to standard vim binary:
# link /usr/bin/nvim /usr/bin/vim
# scim: terminal spreadsheet viewer/editor
# yay_install sc-im
# wordgrinder: terminal word processor
# yay_install wordgrinder
# terminal internet search: google
# yay_install googler
# terminal internet search: duckduckgo
# yay_install ddgr
# trans: command line translation engine
pacman_install translate-shell
# whois information
pacman_install whois
# cronie: cron job daemon
# pacman_install cronie
# systemctl_enable cronie
# ncmpcpp: terminal music client
pacman_install ncmpcpp
# spotify daemon (dependency for spotify-tui)
yay_install spotifyd-full
# spotify-tui: terminal client for spotify
yay_install spotify-tui
# playerctl: terminal client to control spotify, spotifyd, vlc, ...
pacman_install playerctl


## Drive and file system drivers
# mount cifs parititions
pacman_install cifs-utils
# dosfstools: support for dos (windows) - like filesystems
pacman_install dosfstools
# exfat-utils: access fat-drives
pacman_install exfat-utils
# ntfs-3g: access NTFS network drives
pacman_install ntfs-3g
# samba shares = network volumes
pacman_install samba
# access media on external device (phone, ...)
pacman_install libmtp
pacman_install fuse
pacman_install android-file-transfer # android access
# access ssh file system
pacman_install sshfs


## Graphical server: xorg
# the graphical server
# pacman_install xorg
pacman_install xorg-server
pacman_install xorg-server-devel
# querying window information
# pacman_install xorg-xwininfo
# initializing (for starting the window manager without display manager)
pacman_install xorg-xinit
# tool for detecting window properties
pacman_install xorg-xprop
# tool for showing x event names
pacman_install xorg-xev
# for transparent windows etc.
# pacman_install xcompmgr
pacman_install picom
# get info on current active windows
# pacman_install xorg-xdpyinfo
# virtual x server
pacman_install xorg-server-xvfb
# hide an inactive mouse
pacman_install unclutter
# dependency for my st fork to find urls in terminal:
yay_install xurls
# remap escape key:
# yay_install xcape-git
# viewer with synctex support, and some custom plugins
pacman_install xdotool
# for changing brightness etc:
pacman_install xorg-xbacklight
# correct settings for xorg-xbacklight:
cat /etc/X11/xorg.conf 2> /dev/null | grep "Intel Graphics" &> /dev/null
already_configured=$?
if [ -d /sys/class/backlight/intel_backlight ] && [ $already_configured -ne 0 ]; then
    pacman_install xf86-video-intel
    printf "\nSection \"Device\"\n    Identifier \"Intel Graphics\"\n    Driver \"intel\"\n    Option \"Backlight\" \"intel_backlight\"\nEndSection\n" | sudo tee -a /etc/X11/xorg.conf &> /dev/null
fi
# libxft-bgra; alternative to libxft, helper library for color emojis in my st build:
# the reason it is installed this way is because this library replaces libxft
# requiring you to answer yes on a [y/N] question...
echo $password | sudo -S pacman -Q libxft-bgra >> $LOG 2>> $ERR
[ $? = 0 ] || yes | LC_ALL=en_US.UTF-8 yay -S -q libxft-bgra >> $LOG 2>> $ERR

## Desktop Environment / Window Manager
# i3lock: screen lock for i3 and other window managers like in this case dwm.
pacman_install i3lock
# xsetroot: for status bar in dwm
pacman_install xorg-xsetroot
# sxhkd: keyboard shortcuts daemon
pacman_install sxhkd
# xautolock to automatically lock the screen
pacman_install xautolock
# wallpapers
pacman_install feh
# rofi (dmenu alternative)
# pacman_install rofi
# conky: a system monitor
pacman_install conky
# display manager
pacman_install lightdm
#pacman_install lightdm-gtk-greeter
#yay_install lightdm-slick-greeter
yay_install lightdm-mini-greeter
echo $password | sudo -S mkdir -p /usr/share/xsessions
echo $password | sudo -S cp -f $HOME/.local/share/applications/dwm.desktop /usr/share/xsessions/
echo $password | sudo -S sed -i "s/\(#\)\?.*greeter-session.*=.*/greeter-session=lightdm-mini-greeter/g" /etc/lightdm/lightdm.conf >> $LOG 2>> $ERR
echo $password | sudo -S sed -i "s/\(#\)\?.*user-session.*=.*/user-session=dwm/g" /etc/lightdm/lightdm.conf >> $LOG 2>> $ERR
echo $password | sudo -S sed -i "s/^user.*=.*/user = $USER/g" /etc/lightdm/lightdm-mini-greeter.conf >> $LOG 2>> $ERR
echo $password | sudo -S sed -i "s/^show-password-label.*=.*/show-password-label = false/g" /etc/lightdm/lightdm-mini-greeter.conf >> $LOG 2>> $ERR
echo $password | sudo -S sed -i "s/^password-label-text.*=.*/password-label-text = $USER:/g" /etc/lightdm/lightdm-mini-greeter.conf >> $LOG 2>> $ERR
echo $password | sudo -S sed -i "s|^background-image.*=.*|background-image=\"$HOME/.cache/current-wallpaper\"|g" /etc/lightdm/lightdm-mini-greeter.conf >> $LOG 2>> $ERR
echo $password | sudo -S sed -i "s/F92672/2AA198/g" /etc/lightdm/lightdm-mini-greeter.conf >> $LOG 2>> $ERR
systemctl_enable lightdm
# maybe you just want autologin instead of a display manager:
# systemctl_create getty-auto-login


## Desktop notifications
# libnotify allows desktop notifications
pacman_install libnotify
# dunst creates desktop notifications
pacman_install dunst


## Windows compatibility & Gaming
# patch pacman settings to include multilib
# sudo sed -i 's|^#\[multilib\]|[multilib]\nInclude\ =\ /etc/pacman.d/mirrorlist|g' /etc/pacman.conf >> $LOG 2>> $ERR
# wine:
# pacman_install wine
# pacman_install wine-gecko
# pacman_install wine-mono
# pacman_install lutris
# pacman_install playonlinux
# pacman_install steam
# pacman_install vulkan-intel


## Sound
# alsamixer
pacman_install alsa-utils
pacman_install alsa-plugins
pacman_install pulseaudio
# media control
pacman_install mpc
# media daemon
pacman_install mpd
systemctl_enable mpd


## Connectivity & network tools
# network manager
pacman_install networkmanager
systemctl_enable NetworkManager
# create network group (this might fail if the group exists already, but who cares.)
groupadd network >> $LOG 2>> $ERR
# create policy kit rule (everyone in network group can connect to / change networks)
printf "polkit.addRule(function(action, subject) {\n  if (action.id.indexOf(\"org.freedesktop.NetworkManager.\") == 0 && subject.isInGroup(\"network\")) {\n    return polkit.Result.YES;\n  }\n});" | sudo tee /etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules > /dev/null 2>> $ERR
# add current user to network group
echo $password | sudo -S usermod -a -G network $USER
# applet in the corner of the screen
pacman_install network-manager-applet
# vpn: openconnect (cisco anyconnect)
pacman_install openconnect
# vpn: openvpn
pacman_install openvpn
# openvpn service that can be run in the background
systemctl_create openvpn
# systemctl_enable openvpn
# ssh (client and server)
pacman_install openssh
# allow X-forwarding for sshd:
echo $password | sudo -S sed -i 's|^.*X11Forwarding.*|X11Forwarding yes|g' /etc/ssh/sshd_config >> $LOG 2>> $ERR
systemctl_enable sshd
# autossh (for ssh daemons)
pacman_install autossh
# access to google servers
# yay_install google-cloud-sdk
# bluetooth
pacman_install bluez
pacman_install bluez-utils
pacman_install pulseaudio-bluetooth
# enable bluetooth service
systemctl_enable bluetooth
# remote desktop
pacman_install remmina
# add windows remote desktop protocol to remmina
pacman_install freerdp
# barrier: seemless mouse and keyboard sharing between computers
yay_install barrier
yay_install barrier-headless


## Themes
# gtk3
pacman_install gtk3
# adwaita [inkscape dependency]
pacman_install gnome-themes-standard
# murrine theme [inkscape dependency]
pacman_install gtk-engine-murrine
# arc theme
pacman_install arc-gtk-theme
# dark gruvbox-inspired arc theme (default theme for now)
yay_install gtk-theme-arc-gruvbox-git
# lxappearance: tool to choose gtk themes
pacman_install lxappearance
# gtk look-and-feel for qt (comes with kvantummanager = lxappearance for qt apps):
pacman_install kvantum-qt5
# needed to enable kvantum:
pacman_install qt5ct
# manjaro cursor theme
# yay_install xcursor-menda-git
# yay_install xcursor-maia-git
# red-had cursor theme
# pacman_install xcursor-bluecurve
# comix cursor theme
# pacman_install xcursor-comix
# flatbed cursor theme
# pacman_install xcursor-flatbed
# neutral cursor theme
# pacman_install xcursor-neutral
# simple and soft cursor theme
pacman_install xcursor-simpleandsoft


## Web interfaces
# syncthing: synchronization between devices
pacman_install syncthing
# run syncthing as a systemd service
systemctl_create syncthing
# systemctl_enable syncthing
# jellyfin: media center
# yay_install jellyfin
# systemctl_enable jellyfin
# nextcloud: your own dropbox at home :-)
pacman_install nextcloud-client
# override the default general nextcloud settings
[ -f $HOME/.config/Nextcloud/nextcloud.cfg ] || cp $HOME/.config/Nextcloud/nextcloud.general.cfg $HOME/.config/Nextcloud/nextcloud.cfg
# nextcloud server:
# pacman_install nextcloud
# nginx: reverse proxy
pacman_install nginx
echo $password | sudo -S mkdir -p /var/www/html
# patch nginx to increase types hash
grep types_hash_max_size /etc/nginx/nginx.conf &> /dev/null
[ $? -ne 0 ] && echo $password | sudo -S sed -i 's|http {.*|http {types_hash_max_size 4096;|g' /etc/nginx/nginx.conf
# patch nginx to look into /var/www/html by default
echo $password | sudo -S sed -i 's|root.*/usr/share/nginx/html;|root /var/www/html;|g' /etc/nginx/nginx.conf
echo $password | sudo -S cp /usr/share/nginx/html/50x.html /var/www/html/
if [ -f "$HOME/.extra/index.html" ]; then
    [ -f /var/www/html/index.html ] || echo $password | sudo -S cp $HOME/.extra/index.html /var/www/html/index.html
else
    [ -f /var/www/html/index.html ] || echo $password | sudo -S cp /usr/share/nginx/html/index.html /var/www/html/
fi
systemctl_enable nginx


## Printers
# printer system (cups @ localhost:631)
pacman_install cups
# common printer drivers
pacman_install gutenprint
# for network printing
pacman_install avahi
pacman_install nss-mdns
systemctl_enable avahi-daemon
# print to pdf
pacman_install cups-pdf
# enable cups service
systemctl_enable org.cups.cupsd


## Fonts
# fontconfig should already be installed, but just to be sure:
pacman_install fontconfig
# link personal fontconfig to system wide config for better coverage:
link $HOME/.config/fontconfig/conf.d/45-generic.conf /etc/fonts/conf.d/45-generic.conf
link $HOME/.config/fontconfig/conf.d/60-generic.conf /etc/fonts/conf.d/60-generic.conf
# my preferred serif font.
pacman_install ttf-linux-libertine
# my preferred sans-serif (+ chromium dependency)
pacman_install ttf-droid
# best monospace font: inconsolata
# pacman_install ttf-inconsolata
# alternative best monospace font: inconsolata-g
yay_install ttf-inconsolata\-g
# awesome terminal fonts: glyph dependencies (lsd and dwm [my build] dependency)
pacman_install awesome-terminal-fonts
# hack nerd font (requirement for lsd)
yay_install nerd-fonts-hack
# specific symbols for powerlines (recommended dependency for my st build)
pacman_install powerline-fonts
# unicode symbols / emojis (these are standard unicode symbols, hence different than awesome terminal fonts!)
yay_install ttf-symbola-free
# yay_install ttf-twemoji-color
# pacman_install noto-fonts-emoji
pacman_install ttf-joypixels
# yay_install ttf-twemoji-color
# monospace font with ligatures:
# pacman_install ttf-fira-code
# adobe fonts (dependency of GNOME apps. Yes, you'll probably have a few of them...)
# pacman_install adobe-source-code-pro-fonts
# cantarell fonts (dependency of GNOME apps.  Yes, you'll probably have a few of them...)
# pacman_install cantarell-fonts
# gsfonts (dependency of GNOME apps.  Yes, you'll probably have a few of them...)
# pacman_install gsfonts
# sans-serif + firefox & inkscape dependency (note that dejavu is disabled in fontconfig)
# pacman_install ttf-dejavu
# yay_install ttf-twemoji-color
# yay_install ttf-pizzadude-bullets
# yay_install otf-font-awesome-5-free
# yay_install ttf-weather-icons
# some general font improvements:
# disable bitmaps:
link /etc/fonts/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d
# enable sub-pixel RGB rendering
link /etc/fonts/conf.avail/10-sub-pixel-rgb.conf /etc/fonts/conf.d
# enable LCD-filtering
link /etc/fonts/conf.avail/11-lcdfilter-default.conf /etc/fonts/conf.d


## GUIs
# nemo: sometimes a non-terminal file browser can be useful
pacman_install nemo
# nemo settings: set default terminal to st:
gsettings set org.cinnamon.desktop.default-applications.terminal exec st
gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg -e
# nemo-terminal: show a small terminal window on top of the nemo windo
# pacman_install nemo-terminal
# screen settings: arandr (xrandr included)
pacman_install arandr
# best pdf reader: general document reader with vim bindings
pacman_install zathura
# pdf reader extension
pacman_install zathura-pdf-mupdf
# djvu reader extension
pacman_install zathura-djvu
# etcher: GUI dd alternative
yay_install etcher-bin
# anki: a flashcard program
pacman_install anki
# pulseaudio control panel
pacman_install pavucontrol
# bluetooth manager (run blueman-manager)
pacman_install blueman


## Images, video and media
# pinta: an improved ms paint clone
pacman_install pinta
# inkscape
pacman_install inkscape
# GIMP: the GNU Image Manipulation program, a photoshop alternative
# pacman_install gimp
# Krita: another photoshop alternative.
# pacman_install krita
# image viewer
pacman_install sxiv
# imagemagick: for images, screenshots
pacman_install imagemagick
# scrot: alternative screenshot program [requires imagemagick]
# pacman_install scrot
# flameshot: arguably the best screenshot program
pacman_install flameshot
# youtube-dl: download YouTube videos
pacman_install youtube-dl
# YouTube-viewer
pacman_install youtube-viewer
# vlc media player
# pacman_install vlc
# mpv media player
pacman_install mpv
# ffmpeg command line tool
pacman_install ffmpeg
# spotify (I prefer spotifyd + spotify-tui)
# yay_install spotify
# GDS viewer and editor
pacman_install klayout


## Office
# open-source office
pacman_install libreoffice-fresh
# pacman_install libreoffice-still
# recommended font packages for compatibility with MS Office
yay_install ttf-ms-fonts
yay_install ttf-vista-fonts
# open-source office with MS Office look-and-feel:
# yay_install onlyoffice-bin
# sqlite database browser
# pacman_install sqlitebrowser
# tex-live (disabled by default bc heavy package)
# pacman_install texlive-most
# bibliographies
pacman_install biber
# convert document types into each other
pacman_install pandoc
# open-source note taking app
yay_install joplin


## Programming
# code OSS (open source build of vscode)
pacman_install code
if [ $? -eq 0 ]; then
    code --install-extension vscodevim.vim >> $LOG 2>> $ERR
    code --install-extension ban.spellright >> $LOG 2>> $ERR
    code --install-extension wholroyd.jinja >> $LOG 2>> $ERR
    code --install-extension ms-python.python >> $LOG 2>> $ERR
    code --install-extension codezombiech.gitignore >> $LOG 2>> $ERR
    code --install-extension james-yu.latex-workshop >> $LOG 2>> $ERR
    code --install-extension formulahendry.code-runner >> $LOG 2>> $ERR
    code --install-extension shardulm94.trailing-spaces >> $LOG 2>> $ERR
    code --install-extension richie5um2.vscode-sort-json >> $LOG 2>> $ERR
    code --install-extension pkief.material-icon-theme >> $LOG 2>> $ERR
fi
# Python programming language:
pacman_install python
# Scientific computing octave (Matlab alternative)
pacman_install octave


## Browsers
# firefox (basically the only browser you'll ever need)
pacman_install firefox
# patch firefox to work with some legacy extensions (like vimfx)
submodule_install legacyfox
# chromium
pacman_install chromium
# chromium with vaapi hardware acceleration (custom chromium needs to be compiled, takes AGES!)
# yay_install chromium-vaapi
# the name says it all (custom chromium needs to be compiled, takes AGES!):
# yay_install ungoogled-chromium
# vimb: vim-like browser
# pacman_install vimb
# qutebrowser: another vim-like browser
# pacman_install qutebrowser
# surf
# pacman_install webkit2gtk # surf build dependency
# pacman_install gcr # surf build dependency
# pacman_install xorg-xprop # surf build dependency
# pacman_install surf
# brave
# yay_install brave-bin


## Email
# send email
pacman_install msmtp
# mbsync: sync email (isync is the distribution, mbsync is the executable)
pacman_install isync
# mutt email client
pacman_install neomutt
link /usr/bin/neomutt /usr/bin/mutt
# notmuch: email indexing
pacman_install notmuch
# html email view (also browser!)
# pacman_install w3m
pacman_install lynx
# mutt wizard (disabled; manual configuration preferred)
# yay_install mutt-wizard


## Hardware acceleration
# (DANGER ZONE, this may break video output!)
pacman_install libva-utils
pacman_install vdpauinfo

# configuration for intel graphics:
pacman_install intel-media-driver
pacman_install libva-intel-driver
# yay_install libva-intel-driver-g45-h264

# configuration for nvidia open-source nouveau driver (i cannot get this to work):
# pacman_install libva-mesa-driver
# pacman_install mesa-vdpau
# yay_install nouveau-fw
# pacman_install libva-utils
# yay_install intel-opencl

# configuration for proprietary nvidia driver (i cannot get this to work):
# pacman_install nvidia
# pacman_install nvidia-utils
# pacman_install nvidia-settings
# pacman_install opencl-nvidia
# pacman_install libva-vdpau-driver
# pacman_install libva-va-gl

# deep learning (needs nvidia):
# pacman_install cuda-toolkit


## Resources
# a collection of very nice wallpapers:
if [ ! -d "$HOME/.local/share/wallpapers" ]; then
    echo "cloning a full repo of very nice wallpapers..."
    git clone https://gitlab.com/dwt1/wallpapers $HOME/.local/share/wallpapers >> $LOG 2>> $ERR
fi

## Other Services
# run a service in the background that checks how many packages can be updated
systemctl_create pacmanquery
systemctl_enable pacmanquery

## Personal forks (placed at the end so all dependencies are already installed)
# my st fork [terminal]
submodule_install st
# my dwm fork [window manager]
submodule_install dwm
# my dmenu fork [menu]
submodule_install dmenu


## Python
# simple guis
pacman_install tk
# python style guide checker
pacman_install yapf
# python package manager
pacman_install python-pip
pacman_install python2-pip
# progress bars
pacman_install python-tqdm
# numerical calculations
pacman_install python-numpy
pacman_install python2-numpy
# plotting
pacman_install python-matplotlib
pacman_install python2-matplotlib
# linters & formatters (recommended for vim)
pacman_install python-pylint
pacman_install python2-pylint
pacman_install autopep8
pacman_install python2-autopep8
pacman_install flake8
pacman_install python2-flake8
pacman_install python-pyflakes
pacman_install python2-pyflakes
pacman_install python-isort
pacman_install python2-isort
pacman_install python-black
pacman_install python-pywal
# connectivity (requirement for calcurse-caldav synchronization)
pacman_install python-httplib2
# python-neovim integration
pacman_install python-neovim
# image processing in python
# pacman_install python-pillow
# sockets
# pacman_install python-websockets
# castero: podcast client (dependencies installed first)
pacman_install flake8
pacman_install python-requests
pacman_install python-pytest
pacman_install python-cjkwrap
pacman_install python-coverage
pacman_install python-beautifulsoup4
yay_install python-mpv
yay_insall castero
# neovim-remote needed for synctex
pip3_install neovim-remote
# image previews in terminal
pip3_install ueberzug
# automate GUI tasks with pyautogui
pip3_install pyautogui
# google cloud apis
# pip3_install google-api-python-client
# pip3_install google-auth-httplib2
# pip3_install google-auth-oauthlib
# pip2_install google-api-python-client
# pip2_install google-auth-httplib2
# pip2_install google-auth-oauthlib
# smdv: simple markdown viewer
# pip3_install smdv
# run jupyterlab as a systemd service:
systemctl_create jupyterhub
# systemctl_enable jupyterhub


## System settings
#-------------------------------------------------------------------------------
# set correct date/time
echo $password | sudo -S timedatectl set-local-rtc 1 >> $LOG 2>> $ERR
# make sure everyone can mount in /mnt
echo $password | sudo -S chmod a+rwx /mnt >> $LOG 2>> $ERR
if [ ! -f $HOME/.Xresources ]; then
    # copy preferred theme to ~/.Xresources -> default color scheme
    cp $HOME/.config/Xresources/gruvbox-dark $HOME/.Xresources >> $LOG 2>> $ERR
    # enable colorscheme
    xrdb $HOME/.Xresources >> $LOG 2>> $ERR
    # if the custom `xcs` script is in the path,
    # run it to apply colorscheme to currently open windows:
    xcs current >> $LOG 2>> $ERR
fi
# make sure everyone can create folders in /opt
echo $password | sudo -S chmod a+rwx /opt >> $LOG 2>> $ERR


## Password manager
#-------------------------------------------------------------------------------
pacman_install gnupg # gpg --full-gen-key (generate gpg key)
pacman_install pass # pass init floris.laporte@gmail.com (use gpg key to store passwords securely)
# yay_install passff-host  # host for the pass "passFF" firefox extension
pacman_install browserpass # host for the pass "browserpass" chromium/firefox extension
# pacman_install browserpass-chromium # host for the pass "browserpass" chromium extension
# pacman_install browserpass-firefox # host for the pass "browserpass" firefox extension


## Alternative shell
#-------------------------------------------------------------------------------
# dash: a minimal implementation of sh:
pacman_install dash
# we'll make sh point to dash in stead to bash
link /usr/bin/dash /bin/sh

# fish: alternative shell. It's not posix complient, but friendly and interactive ;)
# pacman_install fish
# echo $password | chsh -s /usr/bin/fish

# zsh: another alternative shell. In contrast to fish, it is posix complient + extras
# it's my preferred shell.
pacman_install zsh
# spaceship theme for zsh (my preferred zsh theme):
yay_install spaceship-prompt-git
# autojump extensionfor zsh, I could not live without it:
yay_install autojump-git
# stderred: show stderr messages in red:
yay_install stderred
# patch autojump to only work with system python (acts weirdly when in a virtual env / conda env)
echo $password | sudo -S sed -i 's|#!/usr/bin/env python|#!/usr/bin/python|' $(which autojump) >> $LOG 2>> $ERR
# same fo the autosuggestions, simply ctrl+p [at least for my .zshrc] to accept suggestion. Priceless.
pacman_install zsh-autosuggestions
# syntax highlighting is also useful for zsh:
pacman_install zsh-syntax-highlighting
# optional: make customizing zsh easier (it's actually not so difficult to begin with):
# yay_install oh-my-zsh-git
# make zsh the default shell:
echo "changing shell to zsh..."
echo $password | chsh -s /usr/bin/zsh >> $LOG 2>> $ERR
echo "done."


## Finished
#-------------------------------------------------------------------------------

printf "\n\n\n\n\n"
echo "###############"
echo "## finished! ##"
echo "###############"

