#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# ---------------------------------------------------- #
# !!! NOTE THAT THIS SCRIPT SHOULD NOT BE SOURCED. !!! #
# ---------------------------------------------------- #

# last full run: 2019.11.10

## Checks
#-------------------------------------------------------------------------------

## pre-installation checks
if [ $USER == root ]; then
    echo
    echo "first_install.sh should not be run as root / with sudo."
    echo "this script should be run normally by a user [with sudo privileges]."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "first_install.sh should NOT be sourced."
    exit 1
fi


## Logging
#-------------------------------------------------------------------------------

mkdir -p $HOME/.local/share
LOG="$HOME/.local/share/arch_install.log"
ERR="$HOME/.local/share/arch_install_errors.log"
printf "ARCH PACKAGE INSTALL\n\n\n" > $LOG
printf "ARCH PACKAGE INSTALL\n\n\n" > $ERR


## User input
#-------------------------------------------------------------------------------

# Ask for password, this will be used for all the sudo calls.:
# and to change the shell later on.
read -s -p "[sudo] password for $USER: " password
echo


## Update
#-------------------------------------------------------------------------------

## Update arch
printf "\n\nUpdating Arch Linux...\n\n"
printf "\n\nUpdating Arch Linux...\n\n" >> $LOG
printf "\n\nUpdating Arch Linux...\n\n" >> $ERR
echo $password | sudo -S pacman -Syu --noconfirm >> $LOG 2>> $ERR


## Custom installation functions
#-------------------------------------------------------------------------------

echo_success(){
    if [ $1 -ne 0 ]; then
        printf "failed!\n"
        printf "\nfailed!\n" >> $LOG
        printf "\nfailed!\n" >> $ERR
        return 1
    fi

    printf "success!\n"
    printf "\nsuccess!\n" >> $LOG
    printf "\nsuccess!\n" >> $ERR
    return 0
}

pacman_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $1 >> $LOG 2>> $ERR;
    if [ $? = 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 0
    fi

    printf "sudo pacman -S --noconfirm --noprogress $1\n" >> $LOG
    printf "sudo pacman -S --noconfirm --noprogress $1\n" >> $ERR
    echo $password | sudo -S pacman -S --noconfirm --noprogress $1 >> $LOG 2>> $ERR
    echo_success $?
}

yay_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $1 >> $LOG 2>> $ERR;
    if [ $? = 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 0
    fi

    printf "yay -S -q --noconfirm $1\n" >> $LOG
    printf "yay -S -q --noconfirm $1\n" >> $ERR
    yay -S -q --noconfirm $1 >> $LOG 2>> $ERR
    echo_success $?
}

git_install(){ # will only install the first argument!
    name=$(basename $1)
    name=${name%.*}

    printf "installing $name... "
    printf "\n\n\ninstalling $name...\n" >> $LOG
    printf "\n\n\ninstalling $name...\n" >> $ERR

    # check if package is already installed...
    echo $password | sudo -S pacman -Q $name >> $LOG 2>> $ERR;
    if [ $? = 0 ]; then
        printf "already installed.\n"
        printf "already installed.\n" >> $LOG
        printf "already installed.\n" >> $ERR
        return 0
    fi

    printf "git clone $1 /tmp/gitpkg\n" >> $LOG
    printf "git clone $1 /tmp/gitpkg\n" >> $ERR
    git clone $1 /tmp/gitpkg >> $LOG 2>> $ERR

    printf "cd /tmp/gitpkg\n" >> $LOG
    printf "cd /tmp/gitpkg\n" >> $ERR
    cd /tmp/gitpkg >> $LOG 2>> $ERR

    printf "makepkg -si --noconfirm --noprogress\n" >> $LOG
    printf "makepkg -si --noconfirm --noprogress\n" >> $ERR
    makepkg -si --noconfirm --noprogress >> $LOG 2>> $ERR
    echo_success $?

    printf "cd ~\n" >> $LOG
    printf "cd ~\n" >> $ERR
    cd $HOME >> $LOG 2>> $ERR

    printf "rm -rf /tmp/gitpkg\n" >> $LOG
    printf "rm -rf /tmp/gitpkg\n" >> $ERR
    rm -rf /tmp/gitpkg >> $LOG 2>> $ERR
    
}

submodule_install(){ # will only install the first argument!
    printf "installing $1... "
    printf "\n\n\ninstalling $1...\n" >> $LOG
    printf "\n\n\ninstalling $1...\n" >> $ERR

    printf "cd $HOME/.build/$1\n" >> $LOG
    printf "cd $HOME/.build/$1\n" >> $ERR
    cd "$HOME/.build/$1" >> $LOG 2>> $ERR

    printf "sudo make clean install\n" >> $LOG
    printf "sudo make clean install\n" >> $ERR
    echo $password | sudo -S make clean >> $LOG 2>> $ERR
    echo $password | sudo -S make all >> $LOG 2>> $ERR
    echo $password | sudo -S make install >> $LOG 2>> $ERR
    echo_success $?

    printf "cd $HOME\n" >> $LOG
    printf "cd $HOME\n" >> $ERR
    cd $HOME >> $LOG 2>> $ERR
}

pip3_install() {
    printf "pip3 install $1... "
    printf "\n\n\npip3 install $1\n" >> $LOG
    printf "\n\n\npip3 install $1\n" >> $ERR
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> $LOG
    printf "sudo /usr/bin/python3 -m pip install $1\n" >> $ERR
    echo $password | sudo -S /usr/bin/python3 -m pip install $1 >> $LOG 2>> $ERR
    echo_success $?
}

pip2_install() {
    printf "pip2 install $1... "
    printf "\n\n\npip2 install $1\n" >> $LOG
    printf "\n\n\npip2 install $1\n" >> $ERR
    printf "sudo /usr/bin/python2 -m pip install $1\n" >> $LOG
    printf "sudo /usr/bin/python2 -m pip install $1\n" >> $ERR
    echo $password | sudo -S /usr/bin/python2 -m pip install $1 >> $LOG 2>> $ERR
    echo_success $?
}

systemctl_enable() {
    printf "enabling $1 service... "
    printf "\n\n\nenabling $1 service...\n" >> $LOG
    printf "\n\n\nenabling $1 service...\n" >> $ERR
    printf "sudo systemctl enable $1\n" >> $LOG
    printf "sudo systemctl enable $1\n" >> $ERR
    echo $password | sudo -S systemctl enable $1 >> $LOG 2>> $ERR
    echo_success $?
}

link() {
    printf "link $1 to $2... "
    printf "\n\n\nlink $1 to $2\n" >> $LOG
    printf "\n\n\nlink $1 to $2\n" >> $ERR
    printf "sudo ln -sf $1 $2\n" >> $LOG
    printf "sudo ln -sf $1 $2\n" >> $ERR
    echo $password | sudo -S ln -sf $1 $2  >> $LOG 2>> $ERR
    echo_success $?
}


## Install and configure packages
#-------------------------------------------------------------------------------

## build tools
pacman_install git
pacman_install man
pacman_install make

## AUR package manager
git_install https://aur.archlinux.org/yay.git

## Security
pacman_install gnupg # gpg --full-gen-key (generate gpg key)
pacman_install pass # pass init floris.laporte@gmail.com (use gpg key to store passwords securely)
yay_install passff-host  # host for the firefox extension

## Terminal
# my st fork
submodule_install st
# vim / neovim
pacman_install neovim
link /usr/bin/nvim /usr/bin/vim
# rsync: safe and secure copy & backup
pacman_install rsync
# atool gives information about archives
pacman_install atool
# zip
pacman_install zip
# unzip
pacman_install unzip
# unrar
pacman_install unrar
# rpm extraction shell script
yay_install rpmextract
# pv: progress bars on stdout
pacman_install pv
# battery information
pacman_install acpi
# vifm: terminal file browser
pacman_install vifm
# terminal internet search: google
# yay_install googler
# terminal internet search: duckduckgo
# yay_install ddgr
# search tool
pacman_install grep
# search tool (grep alternative, necessary for some vim extensions)
pacman_install ack
# fuzzy finder tool
pacman_install fzf
# extract urls from text
yay_install xurls
# multiple terminals in one
pacman_install tmux
# show manual for executable
pacman_install man
# show most common commands for executable
pacman_install tldr
# copying and pasting from the terminal
pacman_install xclip
# pdf previews
pacman_install poppler
# highlight: to highlight code in the terminal (nice `cat` alternative)
pacman_install highlight
# mediainfo: show audio and video information in terminal
pacman_install mediainfo
# process information
pacman_install htop
# system information
# pacman_install neofetch
# lightweight system information
# yay_install pfetch
# terminal spreadsheets
# yay_install sc-im
# large ascii letters
pacman_install figlet
# build from source
pacman_install cmake
# netcat: for socket communication
# pacman_install gnu-netcat
# sockets (needed for mpvcontrol)
pacman_install socat
# torrents: transmission
pacman_install transmission-cli
yay_install transmission-remote-cli-git
# a more beautiful ls command
pacman_install lsd
# useless music visualizer:
# yay_install cli-visualizer
# conky: a system monitor
pacman_install conky
# yay_install conky-lua-nv
# reverse proxy
pacman_install nginx
sudo mkdir -p /var/www/html
sudo cp $HOME/.extra/nginx.conf /etc/nginx/nginx.conf
[ -f /var/www/html/index.html ] || sudo cp $HOME/.extra/index.html /var/www/html/index.html
systemctl_enable nginx

## Graphical server: xorg
# the graphical server
# pacman_install xorg
pacman_install xorg-server
# querying window information
pacman_install xorg-xwininfo
# initializing
pacman_install xorg-xinit
# tool for detecting window properties
pacman_install xorg-xprop
# for transparent windows etc.
# pacman_install xcompmgr
pacman_install picom
# get info on current active windows
pacman_install xorg-xdpyinfo
# virtual x server
pacman_install xorg-server-xvfb
# hide an inactive mouse
pacman_install unclutter
# yay_install unclutter-xfixes-git
# viewer with synctex support, and some custom plugins
pacman_install xdotool
# for changing brightness etc:
pacman_install xorg-xbacklight
# correct settings for xorg-xbacklight:
cat /etc/X11/xorg.conf 2> /dev/null | grep "Intel Graphics" &> /dev/null
already_configured=$?
if [ -d /sys/class/backlight/intel_backlight ] && [ $already_configured -ne 0 ]; then
    pacman_install xf86-video-intel
    printf "\nSection \"Device\"\n    Identifier \"Intel Graphics\"\n    Driver \"intel\"\n    Option \"Backlight\" \"intel_backlight\"\nEndSection\n" | sudo tee -a /etc/X11/xorg.conf &> /dev/null
fi

## Desktop Environment / Window Manager
# i3-gaps: allow gaps between windows
# pacman_install i3-gaps
# i3-blocks: status bar for i3
# pacman_install i3-blocks
# i3lock: screen lock for i3 and other window managers.
pacman_install i3lock
# xsetroot: for status bar in dwm
pacman_install xorg-xsetroot
# sxhkd: keyboard shortcuts
pacman_install sxhkd
# xautolock to automatically lock the screen
pacman_install xautolock
# wallpapers
pacman_install feh
# my dwm fork
submodule_install dwm
# my dmenu fork
submodule_install dmenu
# rofi (dmenu alternative)
pacman_install rofi
# display manager
pacman_install lightdm
pacman_install lightdm-gtk-greeter
yay_install lightdm-slick-greeter
# mini greeter seems to not work properly without the above two greeters installed (?)
yay_install lightdm-mini-greeter
sudo rm -f /usr/share/xsessions/*
cat /etc/lightdm/lightdm.conf | sed "s/\(#\)\?greeter-session=.*/greeter-session=lightdm-mini-greeter/g" | sudo tee /etc/lightdm/lightdm.conf > /dev/null 2> $ERR
cat /etc/lightdm/lightdm-mini-greeter.conf | sed "s/^user = CHANGE_ME$/user = $USER/g" | sed "s/F92672/2AA198/g" | sudo tee /etc/lightdm/lightdm-mini-greeter.conf > /dev/null 2> $ERR
sudo cp -f $HOME/.local/share/applications/dwm.desktop /usr/share/xsessions/
systemctl_enable lightdm

## Themes 
# gtk3
pacman_install gtk3
# adwaita [inkscape dependency]
pacman_install gnome-themes-standard
# murrine theme [inkscape dependency]
pacman_install gtk-engine-murrine
# arc theme
pacman_install arc-gtk-theme
# manjaro cursor theme
# yay_install xcursor-menda-git
# yay_install xcursor-maia-git
# red-had cursor theme
# pacman_install xcursor-bluecurve
# comix cursor theme
# pacman_install xcursor-comix
# flatbed cursor theme
# pacman_install xcursor-flatbed
# neutral cursor theme
# pacman_install xcursor-neutral
# simple and soft cursor theme
pacman_install xcursor-simpleandsoft

# set Arc as default gtk2 theme system-wide
sudo rm -r /etc/gtk-2.0/*
sudo rsync -a /usr/share/themes/Arc/gtk-2.0/ /etc/gtk-2.0/ > $LOG 2> $ERR
# gtk look-and-feel for qt:
pacman_install qt5ct
pacman_install kvantum-qt5
# lxappearnce: tool to choose gtk themes
pacman_install lxappearnce

## Web interfaces
# syncthing: synchronization between devices
pacman_install syncthing
# jellyfin: media center
# pacman_install jellyfin
# systemctl_enable jellyfin

## Printers
# printer system (cups @ localhost:631)
pacman_install cups
# common printer drivers
pacman_install gutenprint
# for network printing
pacman_install avahi
pacman_install nss-mdns
systemctl_enable avahi-daemon
# print to pdf
pacman_install cups-pdf
# enable cups service
systemctl_enable org.cups.cupsd

## Fonts
# best monospace font: inconsolata
# pacman_install ttf-inconsolata
# inconsolata on steroids: patched for powerline extensions (zsh/vim...)
yay_install nerd-fonts-inconsolata-go
# best serif font. Maybe because it looks modern?
pacman_install ttf-linux-libertine
# sans-serif + chromium/firefox dependency
pacman_install ttf-droid
# symbols / emojis
yay_install ttf-symbola
# yay_install ttf-twemoji-color
# yay_install ttf-pizzadude-bullets
# yay_install otf-font-awesome-5-free
# yay_install ttf-weather-icons
# some general font improvements:
# disable bitmaps:
link /etc/fonts/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d
# enable sub-pixel RGB rendering
link /etc/fonts/conf.avail/10-sub-pixel-rgb.conf /etc/fonts/conf.d
# enable LCD-filtering
link /etc/fonts/conf.avail/11-lcdfilter-default.conf /etc/fonts/conf.d

## GUIs
# nemo: sometimes a non-terminal file browser can be useful
pacman_install nemo
# screen settings: arandr (xrandr included)
pacman_install arandr
# best pdf reader: general document reader with vim bindings
pacman_install zathura
# pdf reader extension
pacman_install zathura-pdf-mupdf
# djvu reader extension
pacman_install zathura-djvu
# etcher: GUI dd alternative
# yay_install etcher-bin

## Graphic programs
# pinta: an improved ms paint clone
pacman_install pinta
# inkscape
pacman_install inkscape
# GIMP: the GNU Image Manipulation program, a photoshop alternative
# pacman_install gimp
# Krita: another photoshop alternative.
# pacman_install krita

## Office
# open-source office
# pacman_install libreoffice
# recommended font packages for compatibility with MS Office
# yay_install ttf-ms-fonts
# yay_install ttf-vista-fonts
# open-source office MS Office look-and-feel.
# yay_install onlyoffice-bin
# sqlite database browser
# pacman_install sqlitebrowser

## Programming
# code OSS (open source build of vscode)
pacman_install code
if [ ?$ == 0 ]; then
    code --install-extension vscodevim.vim >> $LOG 2>> $ERR
    code --install-extension ban.spellright >> $LOG 2>> $ERR
    code --install-extension wholroyd.jinja >> $LOG 2>> $ERR
    code --install-extension ms-python.python >> $LOG 2>> $ERR
    code --install-extension codezombiech.gitignore >> $LOG 2>> $ERR
    code --install-extension james-yu.latex-workshop >> $LOG 2>> $ERR
    code --install-extension formulahendry.code-runner >> $LOG 2>> $ERR
    code --install-extension shardulm94.trailing-spaces >> $LOG 2>> $ERR
    code --install-extension richie5um2.vscode-sort-json >> $LOG 2>> $ERR
    code --install-extension pkief.material-icon-theme >> $LOG 2>> $ERR
fi

## Drive and file system access
# mount cifs parititions
pacman_install cifs-utils
# dosfstools: support for dos (windows) - like filesystems
pacman_install dosfstools
# exfat-utils: access fat-drives
pacman_install exfat-utils
# ntfs-3g: access NTFS network drives
pacman_install ntfs-3g
# samba shares = network volumes
pacman_install samba
# access media on external device (phone, ...)
pacman_install libmtp
pacman_install fuse
pacman_install android-file-transfer # android access
# access ssh file system
pacman_install sshfs
# install scripts for bootstrapping new arch installation
# pacman_install arch-install-scripts

## Desktop notifications
# libnotify allows desktop notifications
pacman_install libnotify
# dunst creates desktop notifications
pacman_install dunst

## image and video tools
# image viewer
pacman_install sxiv
# imagemagick: for images
pacman_install imagemagick
# youtube-dl: download YouTube videos
pacman_install youtube-dl
# YouTube-viewer
pacman_install youtube-viewer
# vlc media player
# pacman_install vlc
# mpv media player
pacman_install mpv
# ffmpeg command line tool
pacman_install ffmpeg
# spotify
# yay_install spotify

## Connectivity & network tools
# network manager
pacman_install networkmanager
systemctl_enable NetworkManager
# applet in the corner of the screen
pacman_install network-manager-applet
# openvpn
pacman_install openvpn
# ssh (client and server)
pacman_install openssh
systemctl_enable sshd
# autossh (for ssh daemons)
pacman_install autossh
# whois information
pacman_install whois
# access to google servers
# yay_install google-cloud-sdk
# bluetooth
pacman_install bluez
pacman_install bluez-utils
pacman_install pulseaudio-bluetooth
# pacman_install blueman
systemctl_enable bluetooth
# remote desktop
pacman_install remmina
pacman_install freerdp
# barrier: seemless mouse and keyboard sharing between computers
yay_install barrier
yay_install barrier-headless

## Sound
# alsamixer
pacman_install alsa-utils
pacman_install alsa-plugins
pacman_install pulseaudio
# media control
pacman_install mpc 
# media daemon
pacman_install mpd 
systemctl_enable mpd

## Latex
# tex-live (diabled by default bc heavy package)
# pacman_install texlive-most
# bibliographies
pacman_install biber


## Browsers

# firefox
pacman_install firefox
# patch firefox to work with some legacy extensions (like vimfx)
submodule_install legacyfox

# chromium
# pacman_install chromium
# yay_install ungoogled-chromium
# yay_install ungoogled-chromium-archlinux  # preferred
# yay_install ungoogled-chromium-bin

# qutebrowser
# pacman_install qutebrowser

# surf
# pacman_install webkit2gtk # surf build dependency
# pacman_install gcr # surf build dependency
# pacman_install xorg-xprop # surf build dependency
# pacman_install surf

# brave
# yay_install brave-bin


## Email
# send email
pacman_install msmtp
# sync email
pacman_install isync
# mutt email client
pacman_install neomutt
link /usr/bin/neomutt /usr/bin/mutt
# notmuch: email indexing
pacman_install notmuch
# html email view (also browser!)
# pacman_install w3m
pacman_install lynx
# mutt wizard (disabled; manual configuration preferred)
# yay_install mutt-wizard

## Power & sleep
# sleep on low power
pacman_install acpid
systemctl_enable acpid
echo $password | sudo -S chmod a+w /sys/power/state

## nvidia graphics card:
# this is disabled by default, as it gives troubles on devices without nvidia GPU
# pacman_install nvidia
# pacman_install cuda-toolkit

## GDS Layouts
# Klayout
pacman_install klayout

# Scientific computing octave (Matlab alternative)
pacman_install octave


## Python
#-------------------------------------------------------------------------------

# system python packages
pacman_install tk
pacman_install python-pip
pacman_install python2-pip
pacman_install python-tqdm
pacman_install python-numpy
pacman_install python2-numpy
pacman_install python-gobject
pacman_install python-powerline
pacman_install python-websockets
pacman_install python-matplotlib
pacman_install python2-matplotlib

# pywal: an xrdb wrapper library
pip3_install pywal

# install neovim integration for system python
pip3_install neovim
pip2_install neovim
pip3_install neovim-remote

# image previews in vifm
pip3_install ueberzug

# automate GUI tasks with pyautogui
pip3_install pyautogui

# to enable wordcloud background
pip3_install pillow
pip3_install wordcloud

# document portability
pip3_install pandoc
pip2_install pandoc
pip3_install google-api-python-client
pip3_install google-auth-httplib2
pip3_install google-auth-oauthlib
pip2_install google-api-python-client
pip2_install google-auth-httplib2
pip2_install google-auth-oauthlib

# smdv: simple markdown viewer
# pip3_install smdv


## Services
#-------------------------------------------------------------------------------
# TODO: merge the services file with this one.

echo $password | sudo -S $HOME/.install/services >> $LOG 2>> $ERR
echo $password | sudo -S systemctl daemon-reload >> $LOG 2>> $ERR
systemctl_enable syncthing.service
systemctl_enable jupyterhub.service
systemctl_enable pacmanquery.service


## System settings
#-------------------------------------------------------------------------------
# set correct date/time
echo $password | sudo -S timedatectl set-local-rtc 1 >> $LOG 2>> $ERR
# make sure everyone can mount in /mnt
echo $password | sudo -S chmod a+rwx /mnt >> $LOG 2>> $ERR
# link dark solarized theme to ~/.Xresources -> default color scheme
ln -s ~/.config/Xresources/solarizeddark ~/.Xresources >> $LOG 2>> $ERR


## Alternative shell
#-------------------------------------------------------------------------------
# dash: a minimal implementation of sh:
pacman_install dash
# we'll make sh point to dash in stead to bash
link /usr/bin/dash /bin/sh

# fish: alternative shell. It's not posix complient, but friendly and interactive ;)
# pacman_install fish
# echo $password | chsh -s /usr/bin/fish

# zsh: another alternative shell. In contrast to fish, it *is* posix complient.
# it's my preferred shell.
pacman_install zsh
# zsh-extensions:
yay_install autojump-git
pacman_install zsh-autosuggestions
pacman_install zsh-syntax-highlighting

# optional: make customizing zsh easy:
# yay_install oh-my-zsh-git
# we'll make zsh our main shell
echo $password | chsh -s /usr/bin/zsh

