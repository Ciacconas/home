#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# ---------------------------------------------------- #
# !!! NOTE THAT THIS SCRIPT SHOULD NOT BE SOURCED. !!! #
# ---------------------------------------------------- #

# last complete install: 2020.06.06

# Note: this script can be run as often as you like. It will not attempt to re-install
#       any already installed program, making it a very fast way update some preferences
#       or install additional packages by adding them to the list below.


## Checks
#-------------------------------------------------------------------------------

## pre-installation checks
if [ "$USER" == root ]; then
    echo
    echo "'python_install' should NOT be run as root, nor should it be run with sudo."
    echo "this script should be run [normally] by a user with sudo privileges."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "'python_install' should NOT be sourced."
    exit 1
fi


## Parse arguments
#-------------------------------------------------------------------------------


FORCE=0
CONDAROOT="$HOME/.anaconda"
while [ ! -z "$1" ]; do
    if [ "$1" = "--dir" ]; then
        CONDAROOT="$2"
        shift 1
    elif [ "$1" = "--force" ]; then
        FORCE=1
    else
        >&2 echo "usage: python_install [--dir DIR] [--force]"
        exit 1
    fi
    shift 1
done

## Logging
#-------------------------------------------------------------------------------

mkdir -p $HOME/.local/share
LOG="$HOME/.local/share/python_install.log"
ERR="$HOME/.local/share/python_install_errors.log"
printf "ANACONDA PACKAGE INSTALL\n\n\n" > $LOG
printf "ANACONDA PACKAGE INSTALL\n\n\n" > $ERR


## Logging
#-------------------------------------------------------------------------------

echo_success(){
    if [ $1 -ne 0 ]; then
        printf "failed!\n"
        printf "\nfailed!\n" >> $LOG
        printf "\nfailed!\n" >> $ERR
        return 1
    fi

    printf "success!\n"
    printf "\nsuccess!\n" >> $LOG
    printf "\nsuccess!\n" >> $ERR
    return 0
}

create_environment(){
    ENVNAME="$1"
    printf "\n\n\ncreating environment '$ENVNAME'..."
    printf "\n\n\ncreating environment '$ENVNAME'..." >> $LOG
    printf "\n\n\ncreating environment '$ENVNAME'..." >> $ERR
    [ ! -z "$2" ] && local V="python=$2"
    NPM="$CONDAROOT/envs/$ENVNAME/bin/npm"
    PIP="$CONDAROOT/envs/$ENVNAME/bin/pip"
    PYTHON="$CONDAROOT/envs/$ENVNAME/bin/python"
    if [ -d "$CONDAROOT/envs/$ENVNAME" ]; then
        echo "already exists."
        return 0
    fi
    $CONDA create -y -n $ENVNAME $V >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

update_environment() {
    printf "updating environment '$ENVNAME'..."
    printf "\n\n\nupdating environment '$ENVNAME'..." >> $LOG
    printf "\n\n\nupdating environment '$ENVNAME'..." >> $ERR
    $CONDA update -y -n $ENVNAME conda  >> $LOG 2>> $ERR
    $CONDA update -y -n $ENVNAME --all >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

conda_install() {
    printf "[conda] installing '$1' in environment '$ENVNAME'... "
    printf "\n\n\n[conda] installing '$1' in environment '$ENVNAME'...\n" >> $LOG
    printf "\n\n\n[conda] installing '$1' in environment '$ENVNAME'...\n" >> $ERR
    local S=""
    if [ $FORCE -eq 0 ]; then
        if $PYTHON -c "import $1" &> /dev/null; then
            echo "already installed."
            return 0
        fi
        S="-S"
    fi
    if [ ! -z $2 ]; then
        local CHANNEL="-c $2"
    fi
    printf "conda install -y $S $1\n" >> $LOG
    printf "conda install -y $S $1\n" >> $ERR
    $CONDA install -y $S -n $ENVNAME $CHANNEL $1 >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

pip_install() {
    printf "[ pip ] installing '$1' in environment '$ENVNAME'... "
    printf "\n\n\n[ pip ] installing '$1' in environment '$ENVNAME'...\n" >> $LOG
    printf "\n\n\n[ pip ] installing '$1' in environment '$ENVNAME'...\n" >> $ERR
    local S="--upgrade"
    if [ $FORCE -eq 0 ]; then
        if $PYTHON -c "import $1" &> /dev/null; then
            echo "already installed."
            return 0
        fi
        S=""
    fi
    printf "pip install $S $1\n" >> $LOG
    printf "pip install $S $1\n" >> $ERR
    $PIP install $S $1 >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

labextension_install(){
    JUPYTER="$CONDAROOT/bin/jupyter"
    printf "installing jupyterlab extension: $1..."
    printf "\n\n\ninstalling jupyterlab extension: $1..." >> $LOG
    printf "\n\n\ninstalling jupyterlab extension: $1..." >> $ERR
    if $JUPYTER labextension check $1 >> $LOG 2>> $ERR; then
        echo "already installed"
        return 0
    fi
    echo
    $JUPYTER labextension install $1 >> $LOG 2>> $ERR
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

## Anaconda python
#-------------------------------------------------------------------------------

if [ ! -d "$CONDAROOT" ]; then
    printf "installing anaconda python... "
    cd $HOME
    curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --output /tmp/miniconda.sh --silent
    bash /tmp/miniconda.sh -b -p $CONDAROOT >> $LOG 2>> $ERR
    rm /tmp/miniconda.sh
    echo "installed."
fi


## Base environment
#-------------------------------------------------------------------------------

ENVNAME="base"
CONDA="$CONDAROOT/bin/conda"
NPM="$CONDAROOT/bin/npm"
PIP="$CONDAROOT/bin/pip"
PYTHON="$CONDAROOT/bin/python"

update_environment
conda_install cython
conda_install numpy
conda_install pandas
conda_install pytorch
conda_install torchvision
conda_install tensorflow
conda_install scikit-learn
conda_install matplotlib
conda_install altair
conda_install plotly
conda_install pillow
conda_install pandoc
conda_install h5py
conda_install tqdm
conda_install line_profiler
conda_install pylint
conda_install pydocstyle
conda_install mypy
conda_install pep8
conda_install black
conda_install flake8
conda_install pyflakes
conda_install isort
conda_install yapf

conda_install jupyterhub conda-forge
conda_install nodejs conda-forge
conda_install jupyter conda-forge
conda_install jupyterlab conda-forge
conda_install ipympl conda-forge
conda_install ipykernel conda-forge
conda_install ipywidgets conda-forge
conda_install widgetsnbextension conda-forge

conda_install ipdb conda-forge
conda_install pygmo conda-forge
conda_install nbdime conda-forge
conda_install pynvim conda-forge
conda_install octave_kernel conda-forge
conda_install bayesian-optimization conda-forge
conda_install ipyvolume conda-forge

pip_install neovim-remote conda-forge
pip_install jupyterlab_git conda-forge
# pip_install jupyter_tensorboard
# pip_install jupyterlab_latex
# pip_install jupyterlab_code_formatter


## Jupyterlab extensions
#-------------------------------------------------------------------------------

labextension_install @axlair/jupyterlab_vim
labextension_install @jupyter-widgets/jupyterlab-manager
labextension_install ipyvolume
labextension_install @jupyterlab/git
labextension_install jupyterlab-plotly
labextension_install @jupyterlab/toc
labextension_install jupyter-matplotlib
labextension_install jupyter-threejs
labextension_install jupyterlab-datawidgets
labextension_install nbdime-jupyterlab
# labextension_install @jupyterlab/latex
# labextension_install jupyterlab_tensorboard
# labextension_install @ryantam626/jupyterlab_code_formatter
# labextension_install @lckr/jupyterlab_variableinspector


## Py2 environment
#-------------------------------------------------------------------------------

create_environment py2 2.7
update_environment
conda_install cython
conda_install numpy
conda_install pytorch
conda_install torchvision
conda_install matplotlib
conda_install pillow
conda_install scikit-learn
conda_install h5py
conda_install ipympl
conda_install pandas
conda_install jupyter
conda_install jupyterlab
conda_install jupyterhub
conda_install ipykernel
conda_install ipywidgets
conda_install widgetsnbextension
conda_install pandoc
conda_install pylint
conda_install pydocstyle
conda_install mypy
conda_install line_profiler
conda_install tqdm
conda_install altair
conda_install plotly
conda_install pep8
conda_install black
conda_install flake8
conda_install pyflakes
conda_install isort
conda_install yapf
conda_install ipdb conda-forge
conda_install pygmo conda-forge
conda_install pynvim conda-forge
conda_install bayesian-optimization conda-forge
printf "installing jupyter kernel for environment: py2... "
$CONDAROOT/envs/py2/bin/python -m ipykernel install --user --name py2 --display-name "Python 2" >> $LOG 2>> $ERR
mv $HOME/.local/share/jupyter/kernels/py2 $CONDAROOT/share/jupyter/kernels/ >> $LOG 2>> $ERR
echo "finished."


## R environment
#-------------------------------------------------------------------------------

create_environment r
update_environment
conda_install ipykernel
conda_install ipywidgets
conda_install r-irkernel conda-forge
conda_install pynvim conda-forge
pip_install neovim-remote
printf "installing jupyter kernel for environment: r... "
cp -rf $CONDAROOT/envs/r/share/jupyter/kernels/ir $CONDAROOT/share/jupyter/kernels
sed -i "1s|R|$CONDAROOT/envs/r/bin/R|" $CONDAROOT/share/jupyter/kernels/ir/kernel.json

echo "finished."


## Julia environment
#-------------------------------------------------------------------------------

create_environment julia
update_environment
conda_install ipykernel
conda_install ipywidgets
conda_install julia conda-forge
conda_install pynvim conda-forge
pip_install neovim-remote
echo "installing jupyter kernel for environment: julia... "
$CONDAROOT/envs/julia/bin/julia -E 'using Pkg; Pkg.add("IJulia"); precompile' >> $LOG 2>> $ERR
$CONDAROOT/envs/julia/bin/julia -E 'using IJulia; installkernel("Julia")' >> $LOG 2>> $ERR
mv $HOME/.local/share/jupyter/kernels/julia* $CONDAROOT/share/jupyter/kernels/ >> $LOG 2>> $ERR
echo "finished."
