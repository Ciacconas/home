#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# ---------------------------------------------------- #
# !!! NOTE THAT THIS SCRIPT SHOULD NOT BE SOURCED. !!! #
# ---------------------------------------------------- #

# the last time this script was run: 2019-10-14

## Checks
#-------------------------------------------------------------------------------

## Pre-installation checks
if [ $USER == root ]; then
    echo
    echo "python_install should not be run as root / with sudo."
    echo "this script should be run normally by a user [with sudo privileges]."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "python_install should NOT be sourced."
    exit 1
fi


## Logging
#-------------------------------------------------------------------------------

LOG="$HOME/.local/share/python_install.log"
ERR="$HOME/.local/share/python_install_errors.log"
mkdir -p "$HOME/.local/share"
printf "PYTHON PACKAGE INSTALL\n\n\n" > $LOG
printf "PYTHON PACKAGE INSTALL\n\n\n" > $ERR


## Anaconda python
#-------------------------------------------------------------------------------

CONDA="$HOME/.anaconda/bin/conda"

printf "installing anaconda python... "
if [ ! -d $HOME/.anaconda ]; then
    cd $HOME
    curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --output miniconda.sh --silent
    bash miniconda.sh -b -p $HOME/.anaconda >> $LOG 2>> $ERR
    rm miniconda.sh
    echo "installed."
else
    echo "already installed"
fi


## Base environment
#-------------------------------------------------------------------------------

PIP="$HOME/.anaconda/bin/pip"
NPM="$HOME/.anaconda/bin/npm"

# packages in order of importance (conda-forge channel, default channel fails resolving)
echo "installing jupyter stack..." 
$CONDA install -y -S -c conda-forge tornado=5 nodejs=8 jupyter ipykernel jupyterlab jupyterhub matplotlib >> $LOG 2>> $ERR

echo "installing scientific stack... [takes long]"
$CONDA install -y -S numpy pandas ipympl widgetsnbextension cython pillow scikit-learn h5py >> $LOG 2>> $ERR

echo "installing machine learning stack... [takes long]"
$CONDA install -y -S tensorflow keras >> $LOG 2>> $ERR
$CONDA install -y -S -c pytorch pytorch >> $LOG 2>> $ERR

echo "installing other tools... [takes long]"
$CONDA install -y -S pandoc pylint pydocstyle mypy line_profiler ipywidgets tqdm >> $LOG 2>> $ERR

echo "installing octave for environment: base"
$PIP install octave_kernel >> $LOG 2>> $ERR

# echo "installing matlab for environment: base"
# cd <matlabinstallation>/extern/engines/python
# sudo python setup.py install >> $LOG 2>> $ERR
# cd $HOME
# $PIP install matlab_kernel >> $LOG 2>> $ERR
# altair

echo "installing altair for environment: base"
$CONDA install -y -S -c conda-forge altair vega >> $LOG 2>> $ERR

echo "installing plotly for environment: base"
$PIP install plotly >> $LOG 2>> $ERR # plotting library

echo "installing ipdb for environment: base"
$PIP install ipdb >> $LOG 2>> $ERR # pdb in jupyter notebooks

echo "installing black for environment: base"
$PIP install black >> $LOG 2>> $ERR # code formatting

echo "installing ueberzug for environment: base"
$PIP install ueberzug >> $LOG 2>> $ERR # display images in terminal

echo "installing bayesian-optimization for environment: base"
$PIP install bayesian-optimization >> $LOG 2>> $ERR # optimization of hyperparameters

echo "installing pygmo for environment: base"
$PIP install pygmo >> $LOG 2>> $ERR # optimization of multi-variable functions

echo "installing smdv for environment: base"
$PIP install smdv >> $LOG 2>> $ERR # simple markdown viewer

echo "installing neovim support for environment: base"
$PIP install neovim >> $LOG 2>> $ERR
$NPM install -g neovim >> $LOG 2>> $ERR


## Python 2 environment
#-------------------------------------------------------------------------------

PIP="$HOME/.anaconda/envs/py2/bin/pip"

if [ ! -d "$HOME/.anaconda/envs/py2" ]; then
    echo "creating python 2 environment... [py2]"
    $CONDA create -y -n py2 -c conda-forge python=2.7 tornado=5 ipykernel matplotlib >> $LOG 2>> $ERR
else
    echo "updating python 2 environment... [py2]"
    $CONDA install -y -S -n py2 -c conda-forge tornado=5 ipykernel matplotlib >> $LOG 2>> $ERR
fi

echo "installing jupyter stack... [py2]"
$HOME/.anaconda/envs/py2/bin/python -m ipykernel install --user --name py2 --display-name "Python 2"
mv $HOME/.local/share/jupyter/kernels/py2 $HOME/.anaconda/share/jupyter/kernels/

echo "installing scientific stack... [py2]"
$CONDA install -y -S numpy pandas ipympl widgetsnbextension cython pillow scikit-learn h5py tensorflow keras >> $LOG 2>> $ERR

echo "installing machine learning stack... [py2]"
$CONDA install -y -S tensorflow keras >> $LOG 2>> $ERR
$CONDA install -y -S -n py2 pytorch -c pytorch >> $LOG 2>> $ERR

echo "installing other tools... [py2]"
$CONDA install -y -S pandoc pylint pydocstyle mypy line_profiler ipywidgets tqdm >> $LOG 2>> $ERR

echo "installing altair for environment: [py2]"
$CONDA install -y -S -n py2 -c conda-forge altair vega >> $LOG 2>> $ERR

echo "installing neovim support for environment: [py2]"
$PIP install neovim >> $LOG 2>> $ERR


## R environment
#-------------------------------------------------------------------------------

echo "creating R environment: [r]"
if [ ! -d "$HOME/.anaconda/envs/r" ]; then
    $CONDA create -y -n r >> $LOG 2>> $ERR
fi
echo "installing base packages for environment: [r]"
$CONDA install -y -S -n r -c r r-irkernel >> $LOG 2>> $ERR
echo "installing ipykernel for environment: [r]"
cp -rf $HOME/.anaconda/envs/r/share/jupyter/kernels/ir $HOME/.anaconda/share/jupyter/kernels
home=$(echo $HOME | sed 's/\//\\\//g')
sed "0,/R/{s/R/$home\/.anaconda\/envs\/r\/bin\/R/}" $HOME/.anaconda/share/jupyter/kernels/ir/kernel.json > $HOME/.anaconda/share/jupyter/kernels/ir/kernel2.json
mv $HOME/.anaconda/share/jupyter/kernels/ir/kernel2.json $HOME/.anaconda/share/jupyter/kernels/ir/kernel.json


## Julia environment
#-------------------------------------------------------------------------------

echo "creating Julia environment: [julia]"
if [ ! -d "$HOME/.anaconda/envs/julia" ]; then
    $CONDA create -y -n julia >> $LOG 2>> $ERR
fi
echo "installing base packages for environment: [julia]"
$CONDA install -y -S -n julia -c conda-forge julia >> $LOG 2>> $ERR
$HOME/.anaconda/envs/julia/bin/julia -E 'using Pkg; Pkg.add("IJulia"); precompile' >> $LOG 2>> $ERR
echo "installing ipykernel for environment: [julia]"
$HOME/.anaconda/envs/julia/bin/julia -E 'using IJulia; installkernel("Julia")' >> $LOG 2>> $ERR
mv $HOME/.local/share/jupyter/kernels/julia* $HOME/.anaconda/share/jupyter/kernels/


## Fixes
#-------------------------------------------------------------------------------

# remove $CONDA ld binary because it causes trouble for cython:
echo "disabling $CONDA ld binary in favor of the system one [fixes cython on arch linux] "
mv $HOME/.anaconda/compiler_compat/ld $HOME/.anaconda/compiler_compat/ld_disabled
mv $HOME/.anaconda/envs/py2/compiler_compat/ld $HOME/.anaconda/envs/py2/compiler_compat/ld_disabled


## Jupyterlab extensions
#-------------------------------------------------------------------------------

PIP="$HOME/.anaconda/bin/pip"
labextension_install(){
    echo "installing jupyterlab extension: "$1
    JUPYTER="$HOME/.anaconda/bin/jupyter"
    $JUPYTER labextension check $1 || $JUPYTER labextension install $1 >> $LOG 2>> $ERR
}

# jupyterlab extensions
labextension_install @jupyterlab/plotly-extension
labextension_install @jupyterlab/toc
labextension_install @jupyter-widgets/jupyterlab-manager
labextension_install @lckr/jupyterlab_variableinspector
labextension_install @jupyter-widgets/jupyterlab-manager
labextension_install jupyter-threejs
labextension_install jupyter-matplotlib
labextension_install jupyterlab_vim
$PIP install ipyvolume >> $LOG 2>> $ERR
labextension_install ipyvolume
$PIP install jupyterlab_latex >> $LOG 2>> $ERR
labextension_install @jupyterlab/latex
$PIP install jupyterlab_git >> $LOG 2>> $ERR
labextension_install @jupyterlab/git
$PIP install jupyterlab_code_formatter >> $LOG 2>> $ERR
labextension_install @ryantam626/jupyterlab_code_formatter
# $PIP install jupyter_tensorboard
# labextension_install jupyterlab_tensorboard

