#!/usr/bin/env bash
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/

# ---------------------------------------------------- #
# !!! NOTE THAT THIS SCRIPT SHOULD NOT BE SOURCED. !!! #
# ---------------------------------------------------- #

# last complete install: 2020.11.07

# Note: this script can be run as often as you like. It will not attempt to re-install
#       any already installed program, making it a very fast way update some preferences
#       or install additional packages by adding them to the list below.


## checks
#-------------------------------------------------------------------------------

## pre-installation checks
if [ "$USER" == root ]; then
    echo
    echo "'python_install' should NOT be run as root, nor should it be run with sudo."
    echo "this script should be run [normally] by a user with sudo privileges."
    exit 1
fi

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo
    echo "'python_install' should NOT be sourced."
    exit 1
fi


## parse arguments
#-------------------------------------------------------------------------------


FORCE=0
CONDAROOT="$HOME/.anaconda"
while [ ! -z "$1" ]; do
    if [ "$1" = "--dir" ]; then
        CONDAROOT="$2"
        shift 1
    elif [ "$1" = "--force" ]; then
        FORCE=1
    else
        >&2 echo "usage: python_install [--dir DIR] [--force]"
        exit 1
    fi
    shift 1
done

## logging
#-------------------------------------------------------------------------------

mkdir -p "$HOME/.local/share"
LOG="$HOME/.local/share/python_install.log"
ERR="$HOME/.local/share/python_install_errors.log"
printf "ANACONDA PACKAGE INSTALL\n\n\n" > "$LOG"
printf "ANACONDA PACKAGE INSTALL\n\n\n" > "$ERR"


## helpers
#-------------------------------------------------------------------------------

echo_success(){
    if [ "$1" -ne 0 ]; then
        printf "failed!\n"
        printf "\nfailed!\n" >> "$LOG"
        printf "\nfailed!\n" >> "$ERR"
        return 1
    fi

    printf "success!\n"
    printf "\nsuccess!\n" >> "$LOG"
    printf "\nsuccess!\n" >> "$ERR"
    return 0
}

create_environment(){
    printf "[conda] create environment '%s'..." "$ENVNAME"
    printf "\n\n\n[conda] create environment '%s'..." "$ENVNAME" >> "$LOG"
    printf "\n\n\n[conda] create environment '%s'..." "$ENVNAME" >> "$ERR"
    [ ! -z "$1" ] && local V="python=$1"
    PYTHON="$CONDAROOT/envs/$ENVNAME/bin/python"
    if [ -d "$CONDAROOT/envs/$ENVNAME" ]; then
        echo "already exists."
        return 0
    fi
    conda create -y -n "$ENVNAME" "$V" >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

update_environment() {
    printf "[mamba] update environment '%s'..." "$ENVNAME"
    printf "\n\n\n[mamba] update environment '%s'..." "$ENVNAME" >> "$LOG"
    printf "\n\n\n[mamba] update environment '%s'..." "$ENVNAME" >> "$ERR"
    mamba update -y -n "$ENVNAME" --all >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

activate_environment() {
    printf "[conda] activate environment '%s'..." "$ENVNAME"
    printf "\n\n\n[conda] activate environment '%s'..." "$ENVNAME" >> "$LOG"
    printf "\n\n\n[conda] activate environment '%s'..." "$ENVNAME" >> "$ERR"
    conda activate "$ENVNAME" >> "$LOG" 2>> "$ERR"
    echo
}

mamba_install() {
    printf "[mamba] install '%s' in environment '%s'..." "$1" "$ENVNAME"
    printf "\n\n\n[mamba] install '%s' in environment '%s'...\n" "$1" "$ENVNAME" >> "$LOG"
    printf "\n\n\n[mamba] install '%s' in environment '%s'...\n" "$1" "$ENVNAME" >> "$ERR"
    local S=""
    if [ $FORCE -eq 0 ]; then
        if $PYTHON -c "import $1" &> /dev/null; then
            echo "already installed."
            return 0
        fi
        local S="-S"
    fi
    if [ ! -z "$2" ]; then
        local CHANNEL="-c $2"
    fi
    printf "mamba install %s %s\n" "$S" "$1" >> "$LOG"
    printf "mamba install %s %s\n" "$S" "$1" >> "$ERR"
    mamba install -y "$S" -n "$ENVNAME" "$CHANNEL" "$1" >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

pip_install() {
    printf "[ pip ] install '%s' in environment '%s'..." "$1" "$ENVNAME"
    printf "\n\n\n[ pip ] install '%s' in environment '%s'...\n" "$1" "$ENVNAME" >> "$LOG"
    printf "\n\n\n[ pip ] install '%s' in environment '%s'...\n" "$1" "$ENVNAME" >> "$ERR"
    local S="--upgrade"
    if [ $FORCE -eq 0 ]; then
        if $PYTHON -c "import $1" &> /dev/null; then
            echo "already installed."
            return 0
        fi
        local S=""
    fi
    printf "pip install %s %s\n" "$S" "$1" >> "$LOG"
    printf "pip install %s %s\n" "$S" "$1" >> "$ERR"
    if [ ! -z "$S" ]; then
        $PYTHON -m pip install "$S" "$1" >> "$LOG" 2>> "$ERR"
    else
        $PYTHON -m pip install "$1" >> "$LOG" 2>> "$ERR"
    fi
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

labextension_install(){
    JUPYTER="$CONDAROOT/bin/jupyter"
    printf "[ lab ] install extension: %s..." "$1"
    printf "\n\n\n[ lab ] install extension: %s..." "$1" >> "$LOG"
    printf "\n\n\n[ lab ] install extension: %s..." "$1" >> "$ERR"
    if $JUPYTER labextension check "$1" >> "$LOG" 2>> "$ERR"; then
        echo "already installed"
        return 0
    fi
    $JUPYTER labextension install "$1" >> "$LOG" 2>> "$ERR"
    exit_code=$?
    echo_success $exit_code
    return $exit_code
}

## anaconda python
#-------------------------------------------------------------------------------

if [ ! -d "$CONDAROOT" ]; then
    printf "installing anaconda python at %s... " "$CONDAROOT"
    cd "$HOME" || exit 1
    curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --output /tmp/miniconda.sh --silent
    bash /tmp/miniconda.sh -b -p "$CONDAROOT" >> "$LOG" 2>> "$ERR"
    rm /tmp/miniconda.sh
    echo "installed."
fi
__conda_setup="$("$CONDAROOT/bin/conda" 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$CONDAROOT/etc/profile.d/conda.sh" ]; then
        source "$CONDAROOT/etc/profile.d/conda.sh"
    else
        export PATH="$CONDAROOT/bin:$PATH"
    fi
fi
unset __conda_setup
if ! conda list -n base | grep mamba > /dev/null 2>&1; then
    printf "[conda] install 'mamba' in environment 'base'..."
    conda install -y -n base -c conda-forge mamba >/dev/null 2>&1
fi


## base environment
#-------------------------------------------------------------------------------

ENVNAME="base"
PYTHON="$CONDAROOT/bin/python"

update_environment
ctivate_environment
mamba_install black
mamba_install nodejs\>=10 conda-forge
mamba_install jupyterlab\>=3 conda-forge
mamba_install jupyterhub conda-forge
mamba_install jupyterlab_code_formatter conda-forge
mamba_install ipympl conda-forge
mamba_install nbstripout conda-forge
mamba_install pre-commit conda-forge
mamba_install nbdime conda-forge
mamba_install pynvim conda-forge
mamba_install cython
mamba_install numpy
mamba_install scipy
mamba_install sympy
mamba_install pandas
mamba_install pytables
mamba_install tensorflow
mamba_install scikit-learn
mamba_install matplotlib
mamba_install altair
mamba_install plotly
mamba_install pillow
mamba_install pandoc
mamba_install h5py
mamba_install tqdm
mamba_install line_profiler
mamba_install pylint
mamba_install pydocstyle
mamba_install mypy
mamba_install pep8
mamba_install black
mamba_install flake8
mamba_install pyflakes
mamba_install isort
mamba_install yapf
mamba_install pytest
mamba_install twine
pip_install jax
pip_install jaxlib
pip_install neovim-remote
pip_install torch_sparse_solve
pip_install torch_lfilter
